// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: reapchain-core/state/types.proto

package state

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	types "github.com/reapchain/reapchain-core/abci/types"
	types1 "github.com/reapchain/reapchain-core/proto/reapchain-core/types"
	version "github.com/reapchain/reapchain-core/proto/reapchain-core/version"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ABCIResponses retains the responses
// of the various ABCI calls during block processing.
// It is persisted to disk for each height before calling Commit.
type ABCIResponses struct {
	DeliverTxs []*types.ResponseDeliverTx `protobuf:"bytes,1,rep,name=deliver_txs,json=deliverTxs,proto3" json:"deliver_txs,omitempty"`
	EndBlock   *types.ResponseEndBlock    `protobuf:"bytes,2,opt,name=end_block,json=endBlock,proto3" json:"end_block,omitempty"`
	BeginBlock *types.ResponseBeginBlock  `protobuf:"bytes,3,opt,name=begin_block,json=beginBlock,proto3" json:"begin_block,omitempty"`
}

func (m *ABCIResponses) Reset()         { *m = ABCIResponses{} }
func (m *ABCIResponses) String() string { return proto.CompactTextString(m) }
func (*ABCIResponses) ProtoMessage()    {}
func (*ABCIResponses) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7c2b040f4b77b35, []int{0}
}
func (m *ABCIResponses) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ABCIResponses) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ABCIResponses.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ABCIResponses) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ABCIResponses.Merge(m, src)
}
func (m *ABCIResponses) XXX_Size() int {
	return m.Size()
}
func (m *ABCIResponses) XXX_DiscardUnknown() {
	xxx_messageInfo_ABCIResponses.DiscardUnknown(m)
}

var xxx_messageInfo_ABCIResponses proto.InternalMessageInfo

func (m *ABCIResponses) GetDeliverTxs() []*types.ResponseDeliverTx {
	if m != nil {
		return m.DeliverTxs
	}
	return nil
}

func (m *ABCIResponses) GetEndBlock() *types.ResponseEndBlock {
	if m != nil {
		return m.EndBlock
	}
	return nil
}

func (m *ABCIResponses) GetBeginBlock() *types.ResponseBeginBlock {
	if m != nil {
		return m.BeginBlock
	}
	return nil
}

// ValidatorsInfo represents the latest validator set, or the last height it changed
type ValidatorsInfo struct {
	ValidatorSet      *types1.ValidatorSet `protobuf:"bytes,1,opt,name=validator_set,json=validatorSet,proto3" json:"validator_set,omitempty"`
	LastHeightChanged int64                `protobuf:"varint,2,opt,name=last_height_changed,json=lastHeightChanged,proto3" json:"last_height_changed,omitempty"`
}

func (m *ValidatorsInfo) Reset()         { *m = ValidatorsInfo{} }
func (m *ValidatorsInfo) String() string { return proto.CompactTextString(m) }
func (*ValidatorsInfo) ProtoMessage()    {}
func (*ValidatorsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7c2b040f4b77b35, []int{1}
}
func (m *ValidatorsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorsInfo.Merge(m, src)
}
func (m *ValidatorsInfo) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorsInfo proto.InternalMessageInfo

func (m *ValidatorsInfo) GetValidatorSet() *types1.ValidatorSet {
	if m != nil {
		return m.ValidatorSet
	}
	return nil
}

func (m *ValidatorsInfo) GetLastHeightChanged() int64 {
	if m != nil {
		return m.LastHeightChanged
	}
	return 0
}

type StandingMembersInfo struct {
	StandingMemberSet         *types1.StandingMemberSet `protobuf:"bytes,1,opt,name=standing_member_set,json=standingMemberSet,proto3" json:"standing_member_set,omitempty"`
	LastHeightChanged         int64                     `protobuf:"varint,2,opt,name=last_height_changed,json=lastHeightChanged,proto3" json:"last_height_changed,omitempty"`
	CurrentCoordinatorRanking int64                     `protobuf:"varint,3,opt,name=current_coordinator_ranking,json=currentCoordinatorRanking,proto3" json:"current_coordinator_ranking,omitempty"`
}

func (m *StandingMembersInfo) Reset()         { *m = StandingMembersInfo{} }
func (m *StandingMembersInfo) String() string { return proto.CompactTextString(m) }
func (*StandingMembersInfo) ProtoMessage()    {}
func (*StandingMembersInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7c2b040f4b77b35, []int{2}
}
func (m *StandingMembersInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StandingMembersInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StandingMembersInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StandingMembersInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StandingMembersInfo.Merge(m, src)
}
func (m *StandingMembersInfo) XXX_Size() int {
	return m.Size()
}
func (m *StandingMembersInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_StandingMembersInfo.DiscardUnknown(m)
}

var xxx_messageInfo_StandingMembersInfo proto.InternalMessageInfo

func (m *StandingMembersInfo) GetStandingMemberSet() *types1.StandingMemberSet {
	if m != nil {
		return m.StandingMemberSet
	}
	return nil
}

func (m *StandingMembersInfo) GetLastHeightChanged() int64 {
	if m != nil {
		return m.LastHeightChanged
	}
	return 0
}

func (m *StandingMembersInfo) GetCurrentCoordinatorRanking() int64 {
	if m != nil {
		return m.CurrentCoordinatorRanking
	}
	return 0
}

type SteeringMemberCandidateSetInfo struct {
	SteeringMemberCandidateSet *types1.SteeringMemberCandidateSet `protobuf:"bytes,1,opt,name=steering_member_candidate_set,json=steeringMemberCandidateSet,proto3" json:"steering_member_candidate_set,omitempty"`
	LastHeightChanged          int64                              `protobuf:"varint,2,opt,name=last_height_changed,json=lastHeightChanged,proto3" json:"last_height_changed,omitempty"`
}

func (m *SteeringMemberCandidateSetInfo) Reset()         { *m = SteeringMemberCandidateSetInfo{} }
func (m *SteeringMemberCandidateSetInfo) String() string { return proto.CompactTextString(m) }
func (*SteeringMemberCandidateSetInfo) ProtoMessage()    {}
func (*SteeringMemberCandidateSetInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7c2b040f4b77b35, []int{3}
}
func (m *SteeringMemberCandidateSetInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SteeringMemberCandidateSetInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SteeringMemberCandidateSetInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SteeringMemberCandidateSetInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SteeringMemberCandidateSetInfo.Merge(m, src)
}
func (m *SteeringMemberCandidateSetInfo) XXX_Size() int {
	return m.Size()
}
func (m *SteeringMemberCandidateSetInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SteeringMemberCandidateSetInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SteeringMemberCandidateSetInfo proto.InternalMessageInfo

func (m *SteeringMemberCandidateSetInfo) GetSteeringMemberCandidateSet() *types1.SteeringMemberCandidateSet {
	if m != nil {
		return m.SteeringMemberCandidateSet
	}
	return nil
}

func (m *SteeringMemberCandidateSetInfo) GetLastHeightChanged() int64 {
	if m != nil {
		return m.LastHeightChanged
	}
	return 0
}

type QrnsInfo struct {
	QrnSet            *types1.QrnSet `protobuf:"bytes,1,opt,name=qrn_set,json=qrnSet,proto3" json:"qrn_set,omitempty"`
	LastHeightChanged int64          `protobuf:"varint,2,opt,name=last_height_changed,json=lastHeightChanged,proto3" json:"last_height_changed,omitempty"`
}

func (m *QrnsInfo) Reset()         { *m = QrnsInfo{} }
func (m *QrnsInfo) String() string { return proto.CompactTextString(m) }
func (*QrnsInfo) ProtoMessage()    {}
func (*QrnsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7c2b040f4b77b35, []int{4}
}
func (m *QrnsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QrnsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QrnsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QrnsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QrnsInfo.Merge(m, src)
}
func (m *QrnsInfo) XXX_Size() int {
	return m.Size()
}
func (m *QrnsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_QrnsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_QrnsInfo proto.InternalMessageInfo

func (m *QrnsInfo) GetQrnSet() *types1.QrnSet {
	if m != nil {
		return m.QrnSet
	}
	return nil
}

func (m *QrnsInfo) GetLastHeightChanged() int64 {
	if m != nil {
		return m.LastHeightChanged
	}
	return 0
}

type VrfsInfo struct {
	VrfSet            *types1.VrfSet `protobuf:"bytes,1,opt,name=vrf_set,json=vrfSet,proto3" json:"vrf_set,omitempty"`
	LastHeightChanged int64          `protobuf:"varint,2,opt,name=last_height_changed,json=lastHeightChanged,proto3" json:"last_height_changed,omitempty"`
}

func (m *VrfsInfo) Reset()         { *m = VrfsInfo{} }
func (m *VrfsInfo) String() string { return proto.CompactTextString(m) }
func (*VrfsInfo) ProtoMessage()    {}
func (*VrfsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7c2b040f4b77b35, []int{5}
}
func (m *VrfsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VrfsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VrfsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VrfsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VrfsInfo.Merge(m, src)
}
func (m *VrfsInfo) XXX_Size() int {
	return m.Size()
}
func (m *VrfsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_VrfsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_VrfsInfo proto.InternalMessageInfo

func (m *VrfsInfo) GetVrfSet() *types1.VrfSet {
	if m != nil {
		return m.VrfSet
	}
	return nil
}

func (m *VrfsInfo) GetLastHeightChanged() int64 {
	if m != nil {
		return m.LastHeightChanged
	}
	return 0
}

type SettingSteeringMemberInfo struct {
	SettingSteeringMember *types1.SettingSteeringMember `protobuf:"bytes,1,opt,name=setting_steering_member,json=settingSteeringMember,proto3" json:"setting_steering_member,omitempty"`
	LastHeightChanged     int64                         `protobuf:"varint,2,opt,name=last_height_changed,json=lastHeightChanged,proto3" json:"last_height_changed,omitempty"`
}

func (m *SettingSteeringMemberInfo) Reset()         { *m = SettingSteeringMemberInfo{} }
func (m *SettingSteeringMemberInfo) String() string { return proto.CompactTextString(m) }
func (*SettingSteeringMemberInfo) ProtoMessage()    {}
func (*SettingSteeringMemberInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7c2b040f4b77b35, []int{6}
}
func (m *SettingSteeringMemberInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SettingSteeringMemberInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SettingSteeringMemberInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SettingSteeringMemberInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettingSteeringMemberInfo.Merge(m, src)
}
func (m *SettingSteeringMemberInfo) XXX_Size() int {
	return m.Size()
}
func (m *SettingSteeringMemberInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SettingSteeringMemberInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SettingSteeringMemberInfo proto.InternalMessageInfo

func (m *SettingSteeringMemberInfo) GetSettingSteeringMember() *types1.SettingSteeringMember {
	if m != nil {
		return m.SettingSteeringMember
	}
	return nil
}

func (m *SettingSteeringMemberInfo) GetLastHeightChanged() int64 {
	if m != nil {
		return m.LastHeightChanged
	}
	return 0
}

type ConsensusRoundInfo struct {
	ConsensusRound    types1.ConsensusRound `protobuf:"bytes,1,opt,name=consensus_round,json=consensusRound,proto3" json:"consensus_round"`
	LastHeightChanged int64                 `protobuf:"varint,2,opt,name=last_height_changed,json=lastHeightChanged,proto3" json:"last_height_changed,omitempty"`
}

func (m *ConsensusRoundInfo) Reset()         { *m = ConsensusRoundInfo{} }
func (m *ConsensusRoundInfo) String() string { return proto.CompactTextString(m) }
func (*ConsensusRoundInfo) ProtoMessage()    {}
func (*ConsensusRoundInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7c2b040f4b77b35, []int{7}
}
func (m *ConsensusRoundInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusRoundInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusRoundInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusRoundInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusRoundInfo.Merge(m, src)
}
func (m *ConsensusRoundInfo) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusRoundInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusRoundInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusRoundInfo proto.InternalMessageInfo

func (m *ConsensusRoundInfo) GetConsensusRound() types1.ConsensusRound {
	if m != nil {
		return m.ConsensusRound
	}
	return types1.ConsensusRound{}
}

func (m *ConsensusRoundInfo) GetLastHeightChanged() int64 {
	if m != nil {
		return m.LastHeightChanged
	}
	return 0
}

// ConsensusParamsInfo represents the latest consensus params, or the last height it changed
type ConsensusParamsInfo struct {
	ConsensusParams   types1.ConsensusParams `protobuf:"bytes,1,opt,name=consensus_params,json=consensusParams,proto3" json:"consensus_params"`
	LastHeightChanged int64                  `protobuf:"varint,2,opt,name=last_height_changed,json=lastHeightChanged,proto3" json:"last_height_changed,omitempty"`
}

func (m *ConsensusParamsInfo) Reset()         { *m = ConsensusParamsInfo{} }
func (m *ConsensusParamsInfo) String() string { return proto.CompactTextString(m) }
func (*ConsensusParamsInfo) ProtoMessage()    {}
func (*ConsensusParamsInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7c2b040f4b77b35, []int{8}
}
func (m *ConsensusParamsInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsensusParamsInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsensusParamsInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsensusParamsInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsensusParamsInfo.Merge(m, src)
}
func (m *ConsensusParamsInfo) XXX_Size() int {
	return m.Size()
}
func (m *ConsensusParamsInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsensusParamsInfo.DiscardUnknown(m)
}

var xxx_messageInfo_ConsensusParamsInfo proto.InternalMessageInfo

func (m *ConsensusParamsInfo) GetConsensusParams() types1.ConsensusParams {
	if m != nil {
		return m.ConsensusParams
	}
	return types1.ConsensusParams{}
}

func (m *ConsensusParamsInfo) GetLastHeightChanged() int64 {
	if m != nil {
		return m.LastHeightChanged
	}
	return 0
}

type Version struct {
	Consensus version.Consensus `protobuf:"bytes,1,opt,name=consensus,proto3" json:"consensus"`
	Software  string            `protobuf:"bytes,2,opt,name=software,proto3" json:"software,omitempty"`
}

func (m *Version) Reset()         { *m = Version{} }
func (m *Version) String() string { return proto.CompactTextString(m) }
func (*Version) ProtoMessage()    {}
func (*Version) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7c2b040f4b77b35, []int{9}
}
func (m *Version) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Version) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Version.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Version) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Version.Merge(m, src)
}
func (m *Version) XXX_Size() int {
	return m.Size()
}
func (m *Version) XXX_DiscardUnknown() {
	xxx_messageInfo_Version.DiscardUnknown(m)
}

var xxx_messageInfo_Version proto.InternalMessageInfo

func (m *Version) GetConsensus() version.Consensus {
	if m != nil {
		return m.Consensus
	}
	return version.Consensus{}
}

func (m *Version) GetSoftware() string {
	if m != nil {
		return m.Software
	}
	return ""
}

type State struct {
	Version Version `protobuf:"bytes,1,opt,name=version,proto3" json:"version"`
	// immutable
	ChainID       string `protobuf:"bytes,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	InitialHeight int64  `protobuf:"varint,14,opt,name=initial_height,json=initialHeight,proto3" json:"initial_height,omitempty"`
	// LastBlockHeight=0 at genesis (ie. block(H=0) does not exist)
	LastBlockHeight int64          `protobuf:"varint,3,opt,name=last_block_height,json=lastBlockHeight,proto3" json:"last_block_height,omitempty"`
	LastBlockID     types1.BlockID `protobuf:"bytes,4,opt,name=last_block_id,json=lastBlockId,proto3" json:"last_block_id"`
	LastBlockTime   time.Time      `protobuf:"bytes,5,opt,name=last_block_time,json=lastBlockTime,proto3,stdtime" json:"last_block_time"`
	// LastValidators is used to validate block.LastCommit.
	// Validators are persisted to the database separately every time they change,
	// so we can query for historical validator sets.
	// Note that if s.LastBlockHeight causes a valset change,
	// we set s.LastHeightValidatorsChanged = s.LastBlockHeight + 1 + 1
	// Extra +1 due to nextValSet delay.
	NextValidators              *types1.ValidatorSet `protobuf:"bytes,6,opt,name=next_validators,json=nextValidators,proto3" json:"next_validators,omitempty"`
	Validators                  *types1.ValidatorSet `protobuf:"bytes,7,opt,name=validators,proto3" json:"validators,omitempty"`
	LastValidators              *types1.ValidatorSet `protobuf:"bytes,8,opt,name=last_validators,json=lastValidators,proto3" json:"last_validators,omitempty"`
	LastHeightValidatorsChanged int64                `protobuf:"varint,9,opt,name=last_height_validators_changed,json=lastHeightValidatorsChanged,proto3" json:"last_height_validators_changed,omitempty"`
	// Consensus parameters used for validating blocks.
	// Changes returned by EndBlock and updated after Commit.
	ConsensusParams                  types1.ConsensusParams `protobuf:"bytes,10,opt,name=consensus_params,json=consensusParams,proto3" json:"consensus_params"`
	LastHeightConsensusParamsChanged int64                  `protobuf:"varint,11,opt,name=last_height_consensus_params_changed,json=lastHeightConsensusParamsChanged,proto3" json:"last_height_consensus_params_changed,omitempty"`
	// Merkle root of the results from executing prev block
	LastResultsHash []byte `protobuf:"bytes,12,opt,name=last_results_hash,json=lastResultsHash,proto3" json:"last_results_hash,omitempty"`
	// the latest AppHash we've received from calling abci.Commit()
	AppHash                                   []byte                             `protobuf:"bytes,13,opt,name=app_hash,json=appHash,proto3" json:"app_hash,omitempty"`
	StandingMemberSet                         *types1.StandingMemberSet          `protobuf:"bytes,15,opt,name=standing_member_set,json=standingMemberSet,proto3" json:"standing_member_set,omitempty"`
	ConsensusRound                            types1.ConsensusRound              `protobuf:"bytes,16,opt,name=consensus_round,json=consensusRound,proto3" json:"consensus_round"`
	QrnSet                                    *types1.QrnSet                     `protobuf:"bytes,17,opt,name=qrn_set,json=qrnSet,proto3" json:"qrn_set,omitempty"`
	NextQrnSet                                *types1.QrnSet                     `protobuf:"bytes,23,opt,name=next_qrn_set,json=nextQrnSet,proto3" json:"next_qrn_set,omitempty"`
	LastHeightStandingMembersChanged          int64                              `protobuf:"varint,18,opt,name=last_height_standing_members_changed,json=lastHeightStandingMembersChanged,proto3" json:"last_height_standing_members_changed,omitempty"`
	LastHeightConsensusRoundChanged           int64                              `protobuf:"varint,19,opt,name=last_height_consensus_round_changed,json=lastHeightConsensusRoundChanged,proto3" json:"last_height_consensus_round_changed,omitempty"`
	SteeringMemberCandidateSet                *types1.SteeringMemberCandidateSet `protobuf:"bytes,20,opt,name=steering_member_candidate_set,json=steeringMemberCandidateSet,proto3" json:"steering_member_candidate_set,omitempty"`
	LastHeightSteeringMemberCandidatesChanged int64                              `protobuf:"varint,21,opt,name=last_height_steering_member_candidates_changed,json=lastHeightSteeringMemberCandidatesChanged,proto3" json:"last_height_steering_member_candidates_changed,omitempty"`
	VrfSet                                    *types1.VrfSet                     `protobuf:"bytes,22,opt,name=vrf_set,json=vrfSet,proto3" json:"vrf_set,omitempty"`
	NextVrfSet                                *types1.VrfSet                     `protobuf:"bytes,24,opt,name=next_vrf_set,json=nextVrfSet,proto3" json:"next_vrf_set,omitempty"`
	SettingSteeringMember                     *types1.SettingSteeringMember      `protobuf:"bytes,25,opt,name=setting_steering_member,json=settingSteeringMember,proto3" json:"setting_steering_member,omitempty"`
	IsSetSteeringMember                       bool                               `protobuf:"varint,26,opt,name=is_set_steering_member,json=isSetSteeringMember,proto3" json:"is_set_steering_member,omitempty"`
	LastHeightQrnChanged                      int64                              `protobuf:"varint,27,opt,name=last_height_qrn_changed,json=lastHeightQrnChanged,proto3" json:"last_height_qrn_changed,omitempty"`
	LastHeightNextQrnChanged                  int64                              `protobuf:"varint,28,opt,name=last_height_next_qrn_changed,json=lastHeightNextQrnChanged,proto3" json:"last_height_next_qrn_changed,omitempty"`
	LastHeightVrfChanged                      int64                              `protobuf:"varint,29,opt,name=last_height_vrf_changed,json=lastHeightVrfChanged,proto3" json:"last_height_vrf_changed,omitempty"`
	LastHeightNextVrfChanged                  int64                              `protobuf:"varint,30,opt,name=last_height_next_vrf_changed,json=lastHeightNextVrfChanged,proto3" json:"last_height_next_vrf_changed,omitempty"`
	LastHeightSettingSteeringMemberChanged    int64                              `protobuf:"varint,31,opt,name=last_height_setting_steering_member_changed,json=lastHeightSettingSteeringMemberChanged,proto3" json:"last_height_setting_steering_member_changed,omitempty"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_d7c2b040f4b77b35, []int{10}
}
func (m *State) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_State.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return m.Size()
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetVersion() Version {
	if m != nil {
		return m.Version
	}
	return Version{}
}

func (m *State) GetChainID() string {
	if m != nil {
		return m.ChainID
	}
	return ""
}

func (m *State) GetInitialHeight() int64 {
	if m != nil {
		return m.InitialHeight
	}
	return 0
}

func (m *State) GetLastBlockHeight() int64 {
	if m != nil {
		return m.LastBlockHeight
	}
	return 0
}

func (m *State) GetLastBlockID() types1.BlockID {
	if m != nil {
		return m.LastBlockID
	}
	return types1.BlockID{}
}

func (m *State) GetLastBlockTime() time.Time {
	if m != nil {
		return m.LastBlockTime
	}
	return time.Time{}
}

func (m *State) GetNextValidators() *types1.ValidatorSet {
	if m != nil {
		return m.NextValidators
	}
	return nil
}

func (m *State) GetValidators() *types1.ValidatorSet {
	if m != nil {
		return m.Validators
	}
	return nil
}

func (m *State) GetLastValidators() *types1.ValidatorSet {
	if m != nil {
		return m.LastValidators
	}
	return nil
}

func (m *State) GetLastHeightValidatorsChanged() int64 {
	if m != nil {
		return m.LastHeightValidatorsChanged
	}
	return 0
}

func (m *State) GetConsensusParams() types1.ConsensusParams {
	if m != nil {
		return m.ConsensusParams
	}
	return types1.ConsensusParams{}
}

func (m *State) GetLastHeightConsensusParamsChanged() int64 {
	if m != nil {
		return m.LastHeightConsensusParamsChanged
	}
	return 0
}

func (m *State) GetLastResultsHash() []byte {
	if m != nil {
		return m.LastResultsHash
	}
	return nil
}

func (m *State) GetAppHash() []byte {
	if m != nil {
		return m.AppHash
	}
	return nil
}

func (m *State) GetStandingMemberSet() *types1.StandingMemberSet {
	if m != nil {
		return m.StandingMemberSet
	}
	return nil
}

func (m *State) GetConsensusRound() types1.ConsensusRound {
	if m != nil {
		return m.ConsensusRound
	}
	return types1.ConsensusRound{}
}

func (m *State) GetQrnSet() *types1.QrnSet {
	if m != nil {
		return m.QrnSet
	}
	return nil
}

func (m *State) GetNextQrnSet() *types1.QrnSet {
	if m != nil {
		return m.NextQrnSet
	}
	return nil
}

func (m *State) GetLastHeightStandingMembersChanged() int64 {
	if m != nil {
		return m.LastHeightStandingMembersChanged
	}
	return 0
}

func (m *State) GetLastHeightConsensusRoundChanged() int64 {
	if m != nil {
		return m.LastHeightConsensusRoundChanged
	}
	return 0
}

func (m *State) GetSteeringMemberCandidateSet() *types1.SteeringMemberCandidateSet {
	if m != nil {
		return m.SteeringMemberCandidateSet
	}
	return nil
}

func (m *State) GetLastHeightSteeringMemberCandidatesChanged() int64 {
	if m != nil {
		return m.LastHeightSteeringMemberCandidatesChanged
	}
	return 0
}

func (m *State) GetVrfSet() *types1.VrfSet {
	if m != nil {
		return m.VrfSet
	}
	return nil
}

func (m *State) GetNextVrfSet() *types1.VrfSet {
	if m != nil {
		return m.NextVrfSet
	}
	return nil
}

func (m *State) GetSettingSteeringMember() *types1.SettingSteeringMember {
	if m != nil {
		return m.SettingSteeringMember
	}
	return nil
}

func (m *State) GetIsSetSteeringMember() bool {
	if m != nil {
		return m.IsSetSteeringMember
	}
	return false
}

func (m *State) GetLastHeightQrnChanged() int64 {
	if m != nil {
		return m.LastHeightQrnChanged
	}
	return 0
}

func (m *State) GetLastHeightNextQrnChanged() int64 {
	if m != nil {
		return m.LastHeightNextQrnChanged
	}
	return 0
}

func (m *State) GetLastHeightVrfChanged() int64 {
	if m != nil {
		return m.LastHeightVrfChanged
	}
	return 0
}

func (m *State) GetLastHeightNextVrfChanged() int64 {
	if m != nil {
		return m.LastHeightNextVrfChanged
	}
	return 0
}

func (m *State) GetLastHeightSettingSteeringMemberChanged() int64 {
	if m != nil {
		return m.LastHeightSettingSteeringMemberChanged
	}
	return 0
}

func init() {
	proto.RegisterType((*ABCIResponses)(nil), "reapchain.state.ABCIResponses")
	proto.RegisterType((*ValidatorsInfo)(nil), "reapchain.state.ValidatorsInfo")
	proto.RegisterType((*StandingMembersInfo)(nil), "reapchain.state.StandingMembersInfo")
	proto.RegisterType((*SteeringMemberCandidateSetInfo)(nil), "reapchain.state.SteeringMemberCandidateSetInfo")
	proto.RegisterType((*QrnsInfo)(nil), "reapchain.state.QrnsInfo")
	proto.RegisterType((*VrfsInfo)(nil), "reapchain.state.VrfsInfo")
	proto.RegisterType((*SettingSteeringMemberInfo)(nil), "reapchain.state.SettingSteeringMemberInfo")
	proto.RegisterType((*ConsensusRoundInfo)(nil), "reapchain.state.ConsensusRoundInfo")
	proto.RegisterType((*ConsensusParamsInfo)(nil), "reapchain.state.ConsensusParamsInfo")
	proto.RegisterType((*Version)(nil), "reapchain.state.Version")
	proto.RegisterType((*State)(nil), "reapchain.state.State")
}

func init() { proto.RegisterFile("reapchain-core/state/types.proto", fileDescriptor_d7c2b040f4b77b35) }

var fileDescriptor_d7c2b040f4b77b35 = []byte{
	// 1278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0x5f, 0x6f, 0xdb, 0x54,
	0x14, 0xaf, 0xe9, 0xb6, 0xa4, 0x27, 0x4d, 0xb3, 0x39, 0xdb, 0x9a, 0x66, 0x6b, 0x92, 0x85, 0x51,
	0x95, 0x4d, 0x38, 0xa8, 0x03, 0x09, 0x1e, 0x36, 0x41, 0x52, 0xd0, 0x22, 0x95, 0x8a, 0x3a, 0x53,
	0x85, 0x40, 0xc2, 0x72, 0xe2, 0x9b, 0xc4, 0x5a, 0x72, 0x9d, 0xde, 0xeb, 0x84, 0xf2, 0xce, 0x07,
	0xd8, 0x03, 0x0f, 0x7c, 0x06, 0xf8, 0x12, 0x3c, 0xee, 0x71, 0x6f, 0xc0, 0x4b, 0x41, 0xed, 0x17,
	0x41, 0xf7, 0x9f, 0xed, 0x38, 0x4e, 0x68, 0xe8, 0x9e, 0x6a, 0xdf, 0xf3, 0x3b, 0xbf, 0xf3, 0xbb,
	0xe7, 0x1c, 0xdf, 0x7b, 0x1a, 0xa8, 0x10, 0x64, 0x8f, 0x3a, 0x7d, 0xdb, 0xc5, 0x1f, 0x74, 0x3c,
	0x82, 0x6a, 0xd4, 0xb7, 0x7d, 0x54, 0xf3, 0x7f, 0x1c, 0x21, 0x6a, 0x8c, 0x88, 0xe7, 0x7b, 0x7a,
	0x2e, 0x40, 0x18, 0xdc, 0x58, 0xbc, 0xdd, 0xf3, 0x7a, 0x1e, 0xb7, 0xd5, 0xd8, 0x93, 0x80, 0x15,
	0xcb, 0x31, 0x22, 0xbb, 0xdd, 0x71, 0xa3, 0x3c, 0xc5, 0x78, 0x24, 0x6e, 0x9b, 0x42, 0x3c, 0x4c,
	0x44, 0x4c, 0xec, 0x81, 0xeb, 0xd8, 0xbe, 0x47, 0x24, 0xea, 0x41, 0x22, 0x6a, 0x64, 0x13, 0x7b,
	0xa8, 0x88, 0xaa, 0x31, 0xc8, 0x04, 0x11, 0xea, 0x7a, 0x78, 0x2a, 0x58, 0xb9, 0xe7, 0x79, 0xbd,
	0x01, 0xaa, 0xf1, 0xb7, 0xf6, 0xb8, 0x5b, 0xf3, 0xdd, 0x21, 0xa2, 0xbe, 0x3d, 0x1c, 0x49, 0xc0,
	0xa3, 0xc4, 0x38, 0xd4, 0xb7, 0xb1, 0xe3, 0xe2, 0x9e, 0x35, 0x44, 0xc3, 0x36, 0x52, 0x9a, 0x3e,
	0x9a, 0x83, 0x45, 0x88, 0x84, 0x58, 0xab, 0xc3, 0x5c, 0x1d, 0xdb, 0x47, 0xd2, 0xab, 0x94, 0xe8,
	0x75, 0x42, 0xf0, 0x42, 0xfb, 0x84, 0x74, 0xa5, 0x7d, 0x2f, 0x39, 0x2a, 0xf2, 0x7d, 0x16, 0x34,
	0x16, 0x7d, 0xe1, 0xae, 0x3a, 0x1e, 0xa6, 0x08, 0xd3, 0x31, 0xb5, 0x88, 0x37, 0xc6, 0x8e, 0xc0,
	0x56, 0xff, 0xd0, 0x20, 0xfb, 0x79, 0xbd, 0xd1, 0x34, 0x11, 0x1d, 0x31, 0x00, 0xd5, 0xeb, 0x90,
	0x71, 0xd0, 0xc0, 0x9d, 0x20, 0x62, 0xf9, 0xa7, 0xb4, 0xa0, 0x55, 0x56, 0x77, 0x33, 0x7b, 0x0f,
	0x8c, 0xb0, 0x43, 0x58, 0xd5, 0x0d, 0x85, 0xdf, 0x17, 0xd0, 0x17, 0xa7, 0x26, 0x38, 0xea, 0x91,
	0xea, 0x4f, 0x61, 0x0d, 0x61, 0xc7, 0x6a, 0x0f, 0xbc, 0xce, 0xcb, 0xc2, 0x3b, 0x15, 0x6d, 0x37,
	0xb3, 0x57, 0x99, 0xc7, 0xf0, 0x05, 0x76, 0xea, 0x0c, 0x67, 0xa6, 0x91, 0x7c, 0xd2, 0x1b, 0x90,
	0x69, 0xa3, 0x9e, 0x8b, 0x25, 0xc1, 0x2a, 0x27, 0xa8, 0xce, 0x23, 0xa8, 0x33, 0xa8, 0xa0, 0x80,
	0x76, 0xf0, 0x5c, 0xfd, 0x49, 0x83, 0x8d, 0x63, 0xd5, 0x57, 0xb4, 0x89, 0xbb, 0x9e, 0x5e, 0x87,
	0x6c, 0xd0, 0x69, 0x16, 0x45, 0x7e, 0x41, 0xe3, 0xcc, 0xdb, 0x11, 0x66, 0xd1, 0x3e, 0x81, 0x5f,
	0x0b, 0xf9, 0xe6, 0xfa, 0x24, 0xf2, 0xa6, 0x1b, 0x90, 0x1f, 0xd8, 0xd4, 0xb7, 0xfa, 0xc8, 0xed,
	0xf5, 0x7d, 0xab, 0xd3, 0xb7, 0x71, 0x0f, 0x39, 0x7c, 0x93, 0xab, 0xe6, 0x2d, 0x66, 0x7a, 0xce,
	0x2d, 0x0d, 0x61, 0xa8, 0xfe, 0xa5, 0x41, 0xbe, 0x25, 0x1b, 0xea, 0x2b, 0x5e, 0x25, 0xa1, 0xc5,
	0x84, 0x7c, 0xac, 0xcf, 0x22, 0x8a, 0xaa, 0x33, 0x8a, 0xa6, 0x29, 0x98, 0xac, 0x5b, 0x34, 0xbe,
	0xb4, 0xac, 0x36, 0xfd, 0x19, 0xdc, 0xeb, 0x8c, 0x09, 0x41, 0xd8, 0xb7, 0x3a, 0x9e, 0x47, 0x1c,
	0x17, 0xf3, 0xcc, 0x10, 0x1b, 0xbf, 0x74, 0x71, 0x8f, 0xe7, 0x7d, 0xd5, 0xdc, 0x92, 0x90, 0x46,
	0x88, 0x30, 0x05, 0xa0, 0xfa, 0xbb, 0x06, 0xa5, 0x96, 0x6c, 0x41, 0xa1, 0xa2, 0xa1, 0xda, 0xbf,
	0x85, 0x7c, 0xbe, 0x4d, 0x0c, 0xdb, 0x73, 0x3f, 0x91, 0xc8, 0x86, 0x1f, 0x27, 0x6c, 0x78, 0x1e,
	0xaf, 0x59, 0xa4, 0x73, 0x6d, 0x4b, 0x97, 0x67, 0x00, 0xe9, 0x23, 0x82, 0x45, 0x49, 0x3e, 0x84,
	0xd4, 0x09, 0xc1, 0x11, 0x55, 0x9b, 0x33, 0xaa, 0x8e, 0x08, 0x66, 0x0a, 0x6e, 0x9c, 0xf0, 0xbf,
	0xff, 0x27, 0xda, 0x31, 0xe9, 0x06, 0xd1, 0x26, 0xa4, 0xbb, 0x30, 0xda, 0x31, 0xe9, 0xf2, 0x68,
	0x13, 0xfe, 0x77, 0xe9, 0x68, 0xbf, 0x69, 0xb0, 0xd5, 0x12, 0x27, 0xc5, 0x74, 0x36, 0x79, 0xfc,
	0xef, 0x61, 0x73, 0xce, 0x31, 0x22, 0xf5, 0xec, 0xcc, 0xd6, 0x24, 0x89, 0xcc, 0xbc, 0x43, 0x93,
	0x96, 0x97, 0x56, 0xfb, 0xb3, 0x06, 0x7a, 0x43, 0x9d, 0x51, 0x26, 0x3b, 0xa2, 0xb8, 0xcc, 0x43,
	0xc8, 0xc5, 0x4e, 0x2e, 0x29, 0xaf, 0x3c, 0x23, 0x6f, 0xda, 0xbb, 0x7e, 0xed, 0xf5, 0x59, 0x79,
	0xc5, 0xdc, 0xe8, 0x4c, 0xad, 0x2e, 0x2d, 0xeb, 0x17, 0x0d, 0xf2, 0x01, 0xf1, 0xd7, 0xfc, 0x06,
	0xe2, 0xba, 0x8e, 0xe0, 0x66, 0xa8, 0x4b, 0xdc, 0x4c, 0x52, 0x58, 0x65, 0xbe, 0x30, 0xe1, 0x2f,
	0x95, 0x85, 0xfb, 0x12, 0xcb, 0x4b, 0x4b, 0xeb, 0x41, 0xea, 0x58, 0xdc, 0x7a, 0xfa, 0x67, 0xb0,
	0x16, 0xb0, 0x49, 0x19, 0xf7, 0x23, 0x32, 0xe4, 0xe5, 0x18, 0x0a, 0x91, 0x12, 0x42, 0x27, 0xbd,
	0x08, 0x69, 0xea, 0x75, 0xfd, 0x1f, 0x6c, 0x82, 0x78, 0xc4, 0x35, 0x33, 0x78, 0xaf, 0xfe, 0x7a,
	0x13, 0xae, 0xb7, 0xd8, 0x5c, 0xa0, 0x7f, 0x02, 0x29, 0xc9, 0x25, 0xa3, 0x14, 0x8c, 0xd8, 0xe8,
	0x60, 0x48, 0x49, 0x32, 0x82, 0x82, 0xeb, 0x3b, 0x90, 0xe6, 0x28, 0xcb, 0x15, 0x3b, 0x5a, 0xab,
	0x67, 0xce, 0xcf, 0xca, 0xa9, 0x06, 0x5b, 0x6b, 0xee, 0x9b, 0x29, 0x6e, 0x6c, 0x3a, 0xfa, 0x7b,
	0xb0, 0xe1, 0x62, 0xd7, 0x77, 0xed, 0x81, 0xcc, 0x43, 0x61, 0x83, 0xef, 0x3f, 0x2b, 0x57, 0x45,
	0x0a, 0xf4, 0x47, 0xc0, 0x13, 0x22, 0x6e, 0x08, 0x85, 0x14, 0x07, 0x56, 0x8e, 0x19, 0xf8, 0x1d,
	0x20, 0xb1, 0x47, 0x90, 0x8d, 0x60, 0x5d, 0xa7, 0x70, 0x6d, 0x46, 0xba, 0xa8, 0x13, 0x77, 0x6a,
	0xee, 0xd7, 0xf3, 0x4c, 0xfa, 0xf9, 0x59, 0x39, 0x73, 0xa0, 0x98, 0x9a, 0xfb, 0x66, 0x26, 0xa0,
	0x6d, 0x3a, 0xfa, 0x01, 0xe4, 0x22, 0x94, 0x6c, 0xac, 0x28, 0x5c, 0xe7, 0xa4, 0x45, 0x43, 0xcc,
	0x1c, 0x86, 0x9a, 0x39, 0x8c, 0x17, 0x6a, 0xe6, 0xa8, 0xa7, 0x19, 0xed, 0xab, 0xbf, 0xcb, 0x9a,
	0x99, 0x0d, 0xb8, 0x98, 0x55, 0xff, 0x12, 0x72, 0x18, 0x9d, 0xfa, 0x56, 0x70, 0xd1, 0xd0, 0xc2,
	0x8d, 0xcb, 0xdc, 0x4c, 0x1b, 0xcc, 0x2b, 0xbc, 0xe3, 0xf4, 0xa7, 0x00, 0x11, 0x8a, 0xd4, 0x65,
	0x28, 0x22, 0x0e, 0x4c, 0x06, 0xdf, 0x54, 0x84, 0x23, 0x7d, 0x29, 0x19, 0xcc, 0x2b, 0x22, 0xa3,
	0x01, 0xa5, 0x68, 0x1f, 0x87, 0x74, 0x41, 0x4b, 0xaf, 0xf1, 0x42, 0xdd, 0x0b, 0x5b, 0x3a, 0xf4,
	0x56, 0x77, 0x53, 0xd2, 0xf7, 0x05, 0x57, 0xfb, 0xbe, 0x0e, 0xe1, 0xe1, 0xd4, 0xf7, 0x15, 0xa3,
	0x0f, 0xd4, 0x65, 0xb8, 0xba, 0x4a, 0xe4, 0x83, 0x9b, 0x26, 0x52, 0x12, 0x55, 0x0f, 0x12, 0x44,
	0xc7, 0x03, 0x9f, 0x5a, 0x7d, 0x9b, 0xf6, 0x0b, 0xeb, 0x15, 0x6d, 0x77, 0x5d, 0xf4, 0xa0, 0x29,
	0xd6, 0x9f, 0xdb, 0xb4, 0xaf, 0x6f, 0x41, 0xda, 0x1e, 0x8d, 0x04, 0x24, 0xcb, 0x21, 0x29, 0x7b,
	0x34, 0xe2, 0xa6, 0x39, 0x93, 0x40, 0xee, 0x2a, 0x93, 0x40, 0xc2, 0xa9, 0x79, 0xf3, 0x2a, 0xa7,
	0x66, 0xe4, 0x6a, 0xbc, 0x75, 0xb9, 0xab, 0xf1, 0x53, 0x58, 0xe7, 0x3d, 0xad, 0xdc, 0x36, 0x17,
	0xbb, 0x01, 0x03, 0x8b, 0xe7, 0x78, 0x9d, 0x62, 0xc9, 0x09, 0xeb, 0xa4, 0xc7, 0xeb, 0x14, 0x9b,
	0xb3, 0x54, 0x9d, 0x0e, 0xe0, 0xdd, 0xe4, 0xba, 0xf3, 0xc4, 0x04, 0x74, 0x79, 0x4e, 0x57, 0x4e,
	0x28, 0x3b, 0xcf, 0x81, 0x62, 0xfb, 0xcf, 0x89, 0xe6, 0xf6, 0xdb, 0x9d, 0x68, 0x6c, 0x30, 0xa6,
	0xb3, 0x31, 0x27, 0x76, 0x98, 0x97, 0x3b, 0x7c, 0x23, 0xef, 0x47, 0xf3, 0x92, 0xc8, 0x1e, 0x24,
	0x28, 0x32, 0x8a, 0xdc, 0xbd, 0xdc, 0x28, 0xa2, 0xaa, 0xab, 0xdc, 0x0a, 0x8b, 0xdd, 0x78, 0x75,
	0xc5, 0xf3, 0xa2, 0xb9, 0x63, 0xeb, 0x6d, 0xcc, 0x1d, 0x4f, 0xe0, 0xae, 0x4b, 0x99, 0xa8, 0x19,
	0xfa, 0x62, 0x45, 0xdb, 0x4d, 0x9b, 0x79, 0x97, 0xb6, 0x50, 0x2c, 0x25, 0xfa, 0xc7, 0xb0, 0x19,
	0x4d, 0x32, 0x6b, 0x5a, 0x95, 0xcd, 0x7b, 0x3c, 0x9b, 0xb7, 0xc3, 0x6c, 0x1e, 0x11, 0x1c, 0x0e,
	0xd0, 0xf7, 0xa3, 0x6e, 0x41, 0xc3, 0x2b, 0xdf, 0xfb, 0xdc, 0xb7, 0x10, 0xfa, 0x1e, 0x8a, 0x2e,
	0x57, 0xfe, 0xb1, 0xb0, 0x2c, 0x9b, 0xca, 0x75, 0x3b, 0x1e, 0xf6, 0x98, 0x74, 0x17, 0x85, 0x8d,
	0xfa, 0x96, 0x92, 0xc2, 0x46, 0xfc, 0xbf, 0x83, 0xc7, 0x53, 0x2d, 0x95, 0x5c, 0x8e, 0x80, 0xae,
	0xcc, 0xe9, 0x76, 0x22, 0xfd, 0x94, 0x94, 0x78, 0x49, 0x5e, 0xff, 0xe6, 0xf5, 0x79, 0x49, 0x7b,
	0x73, 0x5e, 0xd2, 0xfe, 0x39, 0x2f, 0x69, 0xaf, 0x2e, 0x4a, 0x2b, 0x6f, 0x2e, 0x4a, 0x2b, 0x7f,
	0x5e, 0x94, 0x56, 0xbe, 0x7d, 0xd6, 0x73, 0xfd, 0xfe, 0xb8, 0x6d, 0x74, 0xbc, 0x61, 0x2d, 0x28,
	0x71, 0x2d, 0xf6, 0xcf, 0xaa, 0xf8, 0xd1, 0x21, 0xe9, 0x17, 0x8b, 0xf6, 0x0d, 0x6e, 0x7b, 0xf2,
	0x6f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x34, 0x73, 0x3b, 0x9d, 0xd0, 0x10, 0x00, 0x00,
}

func (m *ABCIResponses) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ABCIResponses) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ABCIResponses) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BeginBlock != nil {
		{
			size, err := m.BeginBlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.EndBlock != nil {
		{
			size, err := m.EndBlock.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DeliverTxs) > 0 {
		for iNdEx := len(m.DeliverTxs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DeliverTxs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastHeightChanged != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LastHeightChanged))
		i--
		dAtA[i] = 0x10
	}
	if m.ValidatorSet != nil {
		{
			size, err := m.ValidatorSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StandingMembersInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StandingMembersInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StandingMembersInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentCoordinatorRanking != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CurrentCoordinatorRanking))
		i--
		dAtA[i] = 0x18
	}
	if m.LastHeightChanged != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LastHeightChanged))
		i--
		dAtA[i] = 0x10
	}
	if m.StandingMemberSet != nil {
		{
			size, err := m.StandingMemberSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SteeringMemberCandidateSetInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SteeringMemberCandidateSetInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SteeringMemberCandidateSetInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastHeightChanged != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LastHeightChanged))
		i--
		dAtA[i] = 0x10
	}
	if m.SteeringMemberCandidateSet != nil {
		{
			size, err := m.SteeringMemberCandidateSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QrnsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QrnsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QrnsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastHeightChanged != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LastHeightChanged))
		i--
		dAtA[i] = 0x10
	}
	if m.QrnSet != nil {
		{
			size, err := m.QrnSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VrfsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VrfsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VrfsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastHeightChanged != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LastHeightChanged))
		i--
		dAtA[i] = 0x10
	}
	if m.VrfSet != nil {
		{
			size, err := m.VrfSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SettingSteeringMemberInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SettingSteeringMemberInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SettingSteeringMemberInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastHeightChanged != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LastHeightChanged))
		i--
		dAtA[i] = 0x10
	}
	if m.SettingSteeringMember != nil {
		{
			size, err := m.SettingSteeringMember.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsensusRoundInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusRoundInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusRoundInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastHeightChanged != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LastHeightChanged))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.ConsensusRound.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *ConsensusParamsInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsensusParamsInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsensusParamsInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastHeightChanged != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LastHeightChanged))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.ConsensusParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Version) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Version) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Version) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Software) > 0 {
		i -= len(m.Software)
		copy(dAtA[i:], m.Software)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Software)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Consensus.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *State) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *State) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *State) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastHeightSettingSteeringMemberChanged != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LastHeightSettingSteeringMemberChanged))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf8
	}
	if m.LastHeightNextVrfChanged != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LastHeightNextVrfChanged))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xf0
	}
	if m.LastHeightVrfChanged != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LastHeightVrfChanged))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe8
	}
	if m.LastHeightNextQrnChanged != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LastHeightNextQrnChanged))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe0
	}
	if m.LastHeightQrnChanged != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LastHeightQrnChanged))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.IsSetSteeringMember {
		i--
		if m.IsSetSteeringMember {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.SettingSteeringMember != nil {
		{
			size, err := m.SettingSteeringMember.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if m.NextVrfSet != nil {
		{
			size, err := m.NextVrfSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if m.NextQrnSet != nil {
		{
			size, err := m.NextQrnSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if m.VrfSet != nil {
		{
			size, err := m.VrfSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.LastHeightSteeringMemberCandidatesChanged != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LastHeightSteeringMemberCandidatesChanged))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.SteeringMemberCandidateSet != nil {
		{
			size, err := m.SteeringMemberCandidateSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.LastHeightConsensusRoundChanged != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LastHeightConsensusRoundChanged))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.LastHeightStandingMembersChanged != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LastHeightStandingMembersChanged))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.QrnSet != nil {
		{
			size, err := m.QrnSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	{
		size, err := m.ConsensusRound.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	if m.StandingMemberSet != nil {
		{
			size, err := m.StandingMemberSet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x7a
	}
	if m.InitialHeight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.InitialHeight))
		i--
		dAtA[i] = 0x70
	}
	if len(m.AppHash) > 0 {
		i -= len(m.AppHash)
		copy(dAtA[i:], m.AppHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AppHash)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.LastResultsHash) > 0 {
		i -= len(m.LastResultsHash)
		copy(dAtA[i:], m.LastResultsHash)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.LastResultsHash)))
		i--
		dAtA[i] = 0x62
	}
	if m.LastHeightConsensusParamsChanged != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LastHeightConsensusParamsChanged))
		i--
		dAtA[i] = 0x58
	}
	{
		size, err := m.ConsensusParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if m.LastHeightValidatorsChanged != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LastHeightValidatorsChanged))
		i--
		dAtA[i] = 0x48
	}
	if m.LastValidators != nil {
		{
			size, err := m.LastValidators.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.Validators != nil {
		{
			size, err := m.Validators.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.NextValidators != nil {
		{
			size, err := m.NextValidators.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	n24, err24 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.LastBlockTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.LastBlockTime):])
	if err24 != nil {
		return 0, err24
	}
	i -= n24
	i = encodeVarintTypes(dAtA, i, uint64(n24))
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.LastBlockID.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.LastBlockHeight != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.LastBlockHeight))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ChainID) > 0 {
		i -= len(m.ChainID)
		copy(dAtA[i:], m.ChainID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.ChainID)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.Version.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ABCIResponses) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DeliverTxs) > 0 {
		for _, e := range m.DeliverTxs {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.EndBlock != nil {
		l = m.EndBlock.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.BeginBlock != nil {
		l = m.BeginBlock.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ValidatorsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ValidatorSet != nil {
		l = m.ValidatorSet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LastHeightChanged != 0 {
		n += 1 + sovTypes(uint64(m.LastHeightChanged))
	}
	return n
}

func (m *StandingMembersInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StandingMemberSet != nil {
		l = m.StandingMemberSet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LastHeightChanged != 0 {
		n += 1 + sovTypes(uint64(m.LastHeightChanged))
	}
	if m.CurrentCoordinatorRanking != 0 {
		n += 1 + sovTypes(uint64(m.CurrentCoordinatorRanking))
	}
	return n
}

func (m *SteeringMemberCandidateSetInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SteeringMemberCandidateSet != nil {
		l = m.SteeringMemberCandidateSet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LastHeightChanged != 0 {
		n += 1 + sovTypes(uint64(m.LastHeightChanged))
	}
	return n
}

func (m *QrnsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QrnSet != nil {
		l = m.QrnSet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LastHeightChanged != 0 {
		n += 1 + sovTypes(uint64(m.LastHeightChanged))
	}
	return n
}

func (m *VrfsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.VrfSet != nil {
		l = m.VrfSet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LastHeightChanged != 0 {
		n += 1 + sovTypes(uint64(m.LastHeightChanged))
	}
	return n
}

func (m *SettingSteeringMemberInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SettingSteeringMember != nil {
		l = m.SettingSteeringMember.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LastHeightChanged != 0 {
		n += 1 + sovTypes(uint64(m.LastHeightChanged))
	}
	return n
}

func (m *ConsensusRoundInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ConsensusRound.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.LastHeightChanged != 0 {
		n += 1 + sovTypes(uint64(m.LastHeightChanged))
	}
	return n
}

func (m *ConsensusParamsInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ConsensusParams.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.LastHeightChanged != 0 {
		n += 1 + sovTypes(uint64(m.LastHeightChanged))
	}
	return n
}

func (m *Version) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Consensus.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.Software)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *State) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Version.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = len(m.ChainID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LastBlockHeight != 0 {
		n += 1 + sovTypes(uint64(m.LastBlockHeight))
	}
	l = m.LastBlockID.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.LastBlockTime)
	n += 1 + l + sovTypes(uint64(l))
	if m.NextValidators != nil {
		l = m.NextValidators.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Validators != nil {
		l = m.Validators.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LastValidators != nil {
		l = m.LastValidators.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.LastHeightValidatorsChanged != 0 {
		n += 1 + sovTypes(uint64(m.LastHeightValidatorsChanged))
	}
	l = m.ConsensusParams.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.LastHeightConsensusParamsChanged != 0 {
		n += 1 + sovTypes(uint64(m.LastHeightConsensusParamsChanged))
	}
	l = len(m.LastResultsHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AppHash)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.InitialHeight != 0 {
		n += 1 + sovTypes(uint64(m.InitialHeight))
	}
	if m.StandingMemberSet != nil {
		l = m.StandingMemberSet.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.ConsensusRound.Size()
	n += 2 + l + sovTypes(uint64(l))
	if m.QrnSet != nil {
		l = m.QrnSet.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.LastHeightStandingMembersChanged != 0 {
		n += 2 + sovTypes(uint64(m.LastHeightStandingMembersChanged))
	}
	if m.LastHeightConsensusRoundChanged != 0 {
		n += 2 + sovTypes(uint64(m.LastHeightConsensusRoundChanged))
	}
	if m.SteeringMemberCandidateSet != nil {
		l = m.SteeringMemberCandidateSet.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.LastHeightSteeringMemberCandidatesChanged != 0 {
		n += 2 + sovTypes(uint64(m.LastHeightSteeringMemberCandidatesChanged))
	}
	if m.VrfSet != nil {
		l = m.VrfSet.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.NextQrnSet != nil {
		l = m.NextQrnSet.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.NextVrfSet != nil {
		l = m.NextVrfSet.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.SettingSteeringMember != nil {
		l = m.SettingSteeringMember.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	if m.IsSetSteeringMember {
		n += 3
	}
	if m.LastHeightQrnChanged != 0 {
		n += 2 + sovTypes(uint64(m.LastHeightQrnChanged))
	}
	if m.LastHeightNextQrnChanged != 0 {
		n += 2 + sovTypes(uint64(m.LastHeightNextQrnChanged))
	}
	if m.LastHeightVrfChanged != 0 {
		n += 2 + sovTypes(uint64(m.LastHeightVrfChanged))
	}
	if m.LastHeightNextVrfChanged != 0 {
		n += 2 + sovTypes(uint64(m.LastHeightNextVrfChanged))
	}
	if m.LastHeightSettingSteeringMemberChanged != 0 {
		n += 2 + sovTypes(uint64(m.LastHeightSettingSteeringMemberChanged))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ABCIResponses) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ABCIResponses: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ABCIResponses: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeliverTxs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeliverTxs = append(m.DeliverTxs, &types.ResponseDeliverTx{})
			if err := m.DeliverTxs[len(m.DeliverTxs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EndBlock == nil {
				m.EndBlock = &types.ResponseEndBlock{}
			}
			if err := m.EndBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeginBlock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BeginBlock == nil {
				m.BeginBlock = &types.ResponseBeginBlock{}
			}
			if err := m.BeginBlock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ValidatorSet == nil {
				m.ValidatorSet = &types1.ValidatorSet{}
			}
			if err := m.ValidatorSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeightChanged", wireType)
			}
			m.LastHeightChanged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeightChanged |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StandingMembersInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StandingMembersInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StandingMembersInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StandingMemberSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StandingMemberSet == nil {
				m.StandingMemberSet = &types1.StandingMemberSet{}
			}
			if err := m.StandingMemberSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeightChanged", wireType)
			}
			m.LastHeightChanged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeightChanged |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentCoordinatorRanking", wireType)
			}
			m.CurrentCoordinatorRanking = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentCoordinatorRanking |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SteeringMemberCandidateSetInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SteeringMemberCandidateSetInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SteeringMemberCandidateSetInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SteeringMemberCandidateSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SteeringMemberCandidateSet == nil {
				m.SteeringMemberCandidateSet = &types1.SteeringMemberCandidateSet{}
			}
			if err := m.SteeringMemberCandidateSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeightChanged", wireType)
			}
			m.LastHeightChanged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeightChanged |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QrnsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QrnsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QrnsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QrnSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QrnSet == nil {
				m.QrnSet = &types1.QrnSet{}
			}
			if err := m.QrnSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeightChanged", wireType)
			}
			m.LastHeightChanged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeightChanged |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VrfsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VrfsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VrfsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VrfSet == nil {
				m.VrfSet = &types1.VrfSet{}
			}
			if err := m.VrfSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeightChanged", wireType)
			}
			m.LastHeightChanged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeightChanged |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SettingSteeringMemberInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SettingSteeringMemberInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SettingSteeringMemberInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettingSteeringMember", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SettingSteeringMember == nil {
				m.SettingSteeringMember = &types1.SettingSteeringMember{}
			}
			if err := m.SettingSteeringMember.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeightChanged", wireType)
			}
			m.LastHeightChanged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeightChanged |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusRoundInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusRoundInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusRoundInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusRound", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConsensusRound.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeightChanged", wireType)
			}
			m.LastHeightChanged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeightChanged |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsensusParamsInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsensusParamsInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsensusParamsInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConsensusParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeightChanged", wireType)
			}
			m.LastHeightChanged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeightChanged |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Version) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Version: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Version: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Consensus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Consensus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Software", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Software = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *State) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: State: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: State: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Version.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlockHeight", wireType)
			}
			m.LastBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlockID", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastBlockID.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlockTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.LastBlockTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextValidators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextValidators == nil {
				m.NextValidators = &types1.ValidatorSet{}
			}
			if err := m.NextValidators.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Validators == nil {
				m.Validators = &types1.ValidatorSet{}
			}
			if err := m.Validators.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastValidators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastValidators == nil {
				m.LastValidators = &types1.ValidatorSet{}
			}
			if err := m.LastValidators.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeightValidatorsChanged", wireType)
			}
			m.LastHeightValidatorsChanged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeightValidatorsChanged |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConsensusParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeightConsensusParamsChanged", wireType)
			}
			m.LastHeightConsensusParamsChanged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeightConsensusParamsChanged |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastResultsHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastResultsHash = append(m.LastResultsHash[:0], dAtA[iNdEx:postIndex]...)
			if m.LastResultsHash == nil {
				m.LastResultsHash = []byte{}
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AppHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AppHash = append(m.AppHash[:0], dAtA[iNdEx:postIndex]...)
			if m.AppHash == nil {
				m.AppHash = []byte{}
			}
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitialHeight", wireType)
			}
			m.InitialHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitialHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StandingMemberSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StandingMemberSet == nil {
				m.StandingMemberSet = &types1.StandingMemberSet{}
			}
			if err := m.StandingMemberSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsensusRound", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ConsensusRound.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QrnSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.QrnSet == nil {
				m.QrnSet = &types1.QrnSet{}
			}
			if err := m.QrnSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeightStandingMembersChanged", wireType)
			}
			m.LastHeightStandingMembersChanged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeightStandingMembersChanged |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeightConsensusRoundChanged", wireType)
			}
			m.LastHeightConsensusRoundChanged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeightConsensusRoundChanged |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SteeringMemberCandidateSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SteeringMemberCandidateSet == nil {
				m.SteeringMemberCandidateSet = &types1.SteeringMemberCandidateSet{}
			}
			if err := m.SteeringMemberCandidateSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeightSteeringMemberCandidatesChanged", wireType)
			}
			m.LastHeightSteeringMemberCandidatesChanged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeightSteeringMemberCandidatesChanged |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VrfSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.VrfSet == nil {
				m.VrfSet = &types1.VrfSet{}
			}
			if err := m.VrfSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextQrnSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextQrnSet == nil {
				m.NextQrnSet = &types1.QrnSet{}
			}
			if err := m.NextQrnSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextVrfSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NextVrfSet == nil {
				m.NextVrfSet = &types1.VrfSet{}
			}
			if err := m.NextVrfSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 25:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SettingSteeringMember", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SettingSteeringMember == nil {
				m.SettingSteeringMember = &types1.SettingSteeringMember{}
			}
			if err := m.SettingSteeringMember.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsSetSteeringMember", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsSetSteeringMember = bool(v != 0)
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeightQrnChanged", wireType)
			}
			m.LastHeightQrnChanged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeightQrnChanged |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 28:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeightNextQrnChanged", wireType)
			}
			m.LastHeightNextQrnChanged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeightNextQrnChanged |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 29:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeightVrfChanged", wireType)
			}
			m.LastHeightVrfChanged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeightVrfChanged |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 30:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeightNextVrfChanged", wireType)
			}
			m.LastHeightNextVrfChanged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeightNextVrfChanged |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 31:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastHeightSettingSteeringMemberChanged", wireType)
			}
			m.LastHeightSettingSteeringMemberChanged = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastHeightSettingSteeringMemberChanged |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
