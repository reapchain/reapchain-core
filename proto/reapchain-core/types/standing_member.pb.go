// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: reapchain-core/types/standing_member.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	crypto "github.com/reapchain/reapchain-core/proto/reapchain-core/crypto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StandingMember struct {
	PubKey  crypto.PublicKey `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key"`
	Address []byte           `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *StandingMember) Reset()         { *m = StandingMember{} }
func (m *StandingMember) String() string { return proto.CompactTextString(m) }
func (*StandingMember) ProtoMessage()    {}
func (*StandingMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fd397041f997fc9, []int{0}
}
func (m *StandingMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StandingMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StandingMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StandingMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StandingMember.Merge(m, src)
}
func (m *StandingMember) XXX_Size() int {
	return m.Size()
}
func (m *StandingMember) XXX_DiscardUnknown() {
	xxx_messageInfo_StandingMember.DiscardUnknown(m)
}

var xxx_messageInfo_StandingMember proto.InternalMessageInfo

func (m *StandingMember) GetPubKey() crypto.PublicKey {
	if m != nil {
		return m.PubKey
	}
	return crypto.PublicKey{}
}

func (m *StandingMember) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

type SimpleStandingMember struct {
	PubKey *crypto.PublicKey `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
}

func (m *SimpleStandingMember) Reset()         { *m = SimpleStandingMember{} }
func (m *SimpleStandingMember) String() string { return proto.CompactTextString(m) }
func (*SimpleStandingMember) ProtoMessage()    {}
func (*SimpleStandingMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fd397041f997fc9, []int{1}
}
func (m *SimpleStandingMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleStandingMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleStandingMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleStandingMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleStandingMember.Merge(m, src)
}
func (m *SimpleStandingMember) XXX_Size() int {
	return m.Size()
}
func (m *SimpleStandingMember) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleStandingMember.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleStandingMember proto.InternalMessageInfo

func (m *SimpleStandingMember) GetPubKey() *crypto.PublicKey {
	if m != nil {
		return m.PubKey
	}
	return nil
}

type StandingMemberSet struct {
	StandingMembers           []*StandingMember `protobuf:"bytes,1,rep,name=standing_members,json=standingMembers,proto3" json:"standing_members,omitempty"`
	Coordinator               *StandingMember   `protobuf:"bytes,2,opt,name=coordinator,proto3" json:"coordinator,omitempty"`
	CurrentCoordinatorRanking int64             `protobuf:"varint,3,opt,name=current_coordinator_ranking,json=currentCoordinatorRanking,proto3" json:"current_coordinator_ranking,omitempty"`
}

func (m *StandingMemberSet) Reset()         { *m = StandingMemberSet{} }
func (m *StandingMemberSet) String() string { return proto.CompactTextString(m) }
func (*StandingMemberSet) ProtoMessage()    {}
func (*StandingMemberSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_4fd397041f997fc9, []int{2}
}
func (m *StandingMemberSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StandingMemberSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StandingMemberSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StandingMemberSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StandingMemberSet.Merge(m, src)
}
func (m *StandingMemberSet) XXX_Size() int {
	return m.Size()
}
func (m *StandingMemberSet) XXX_DiscardUnknown() {
	xxx_messageInfo_StandingMemberSet.DiscardUnknown(m)
}

var xxx_messageInfo_StandingMemberSet proto.InternalMessageInfo

func (m *StandingMemberSet) GetStandingMembers() []*StandingMember {
	if m != nil {
		return m.StandingMembers
	}
	return nil
}

func (m *StandingMemberSet) GetCoordinator() *StandingMember {
	if m != nil {
		return m.Coordinator
	}
	return nil
}

func (m *StandingMemberSet) GetCurrentCoordinatorRanking() int64 {
	if m != nil {
		return m.CurrentCoordinatorRanking
	}
	return 0
}

func init() {
	proto.RegisterType((*StandingMember)(nil), "reapchain.types.StandingMember")
	proto.RegisterType((*SimpleStandingMember)(nil), "reapchain.types.SimpleStandingMember")
	proto.RegisterType((*StandingMemberSet)(nil), "reapchain.types.StandingMemberSet")
}

func init() {
	proto.RegisterFile("reapchain-core/types/standing_member.proto", fileDescriptor_4fd397041f997fc9)
}

var fileDescriptor_4fd397041f997fc9 = []byte{
	// 349 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xbf, 0x4e, 0xc3, 0x30,
	0x10, 0xc6, 0x63, 0x8a, 0x5a, 0xc9, 0x45, 0x14, 0xa2, 0x0e, 0xa1, 0x95, 0xd2, 0xa8, 0x53, 0x84,
	0x44, 0x22, 0x15, 0x26, 0x86, 0x4a, 0x94, 0x8d, 0x82, 0x84, 0xd2, 0x05, 0xb1, 0x44, 0x89, 0x63,
	0x52, 0xab, 0x8d, 0x6d, 0xd9, 0xce, 0x90, 0xb7, 0xe0, 0xb1, 0x3a, 0x76, 0x64, 0x42, 0x28, 0x7d,
	0x11, 0x44, 0xd2, 0xbf, 0x11, 0x03, 0x6c, 0x3e, 0xdf, 0xef, 0xbe, 0xcf, 0xbe, 0x3b, 0x78, 0x29,
	0x70, 0xc0, 0xd1, 0x34, 0x20, 0xf4, 0x0a, 0x31, 0x81, 0x5d, 0x95, 0x71, 0x2c, 0x5d, 0xa9, 0x02,
	0x1a, 0x11, 0x1a, 0xfb, 0x09, 0x4e, 0x42, 0x2c, 0x1c, 0x2e, 0x98, 0x62, 0x7a, 0x6b, 0xcb, 0x3a,
	0x05, 0xd6, 0x69, 0xc7, 0x2c, 0x66, 0x45, 0xce, 0xfd, 0x39, 0x95, 0x58, 0xc7, 0xaa, 0x48, 0x22,
	0x91, 0x71, 0xc5, 0xdc, 0x19, 0xce, 0x64, 0x49, 0xf4, 0xdf, 0xe0, 0xe9, 0x64, 0xed, 0xf0, 0x54,
	0x18, 0xe8, 0xb7, 0xb0, 0xc1, 0xd3, 0xd0, 0x9f, 0xe1, 0xcc, 0x00, 0x16, 0xb0, 0x9b, 0x83, 0xae,
	0xb3, 0x33, 0x2b, 0x05, 0x9c, 0xe7, 0x34, 0x9c, 0x13, 0x34, 0xc6, 0xd9, 0xe8, 0x78, 0xf1, 0xd9,
	0xd3, 0xbc, 0x3a, 0x4f, 0xc3, 0x31, 0xce, 0x74, 0x03, 0x36, 0x82, 0x28, 0x12, 0x58, 0x4a, 0xe3,
	0xc8, 0x02, 0xf6, 0x89, 0xb7, 0x09, 0xfb, 0x8f, 0xb0, 0x3d, 0x21, 0x09, 0x9f, 0xe3, 0x8a, 0xdb,
	0xcd, 0x7f, 0xdc, 0x36, 0x3e, 0xfd, 0x1c, 0xc0, 0xf3, 0x43, 0xa1, 0x09, 0x56, 0xfa, 0x03, 0x3c,
	0xab, 0x74, 0x4b, 0x1a, 0xc0, 0xaa, 0xd9, 0xcd, 0x41, 0xcf, 0xa9, 0xf4, 0xcb, 0x39, 0xac, 0xf6,
	0x5a, 0xf2, 0x20, 0x96, 0xfa, 0x1d, 0x6c, 0x22, 0xc6, 0x44, 0x44, 0x68, 0xa0, 0x98, 0x28, 0x7e,
	0xf3, 0x07, 0x99, 0xfd, 0x1a, 0x7d, 0x08, 0xbb, 0x28, 0x15, 0x02, 0x53, 0xe5, 0xef, 0x5d, 0xfb,
	0x22, 0xa0, 0x33, 0x42, 0x63, 0xa3, 0x66, 0x01, 0xbb, 0xe6, 0x5d, 0xac, 0x91, 0xfb, 0x1d, 0xe1,
	0x95, 0xc0, 0xe8, 0x65, 0x91, 0x9b, 0x60, 0x99, 0x9b, 0xe0, 0x2b, 0x37, 0xc1, 0xfb, 0xca, 0xd4,
	0x96, 0x2b, 0x53, 0xfb, 0x58, 0x99, 0xda, 0xeb, 0x30, 0x26, 0x6a, 0x9a, 0x86, 0x0e, 0x62, 0x89,
	0xbb, 0x7d, 0x91, 0x5b, 0x99, 0x75, 0xb9, 0x0c, 0xbf, 0xed, 0x54, 0x58, 0x2f, 0x72, 0xd7, 0xdf,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x9c, 0xfb, 0x1f, 0xdf, 0x72, 0x02, 0x00, 0x00,
}

func (m *StandingMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StandingMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StandingMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintStandingMember(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.PubKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStandingMember(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SimpleStandingMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleStandingMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleStandingMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PubKey != nil {
		{
			size, err := m.PubKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStandingMember(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StandingMemberSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StandingMemberSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StandingMemberSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrentCoordinatorRanking != 0 {
		i = encodeVarintStandingMember(dAtA, i, uint64(m.CurrentCoordinatorRanking))
		i--
		dAtA[i] = 0x18
	}
	if m.Coordinator != nil {
		{
			size, err := m.Coordinator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStandingMember(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.StandingMembers) > 0 {
		for iNdEx := len(m.StandingMembers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.StandingMembers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintStandingMember(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintStandingMember(dAtA []byte, offset int, v uint64) int {
	offset -= sovStandingMember(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StandingMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PubKey.Size()
	n += 1 + l + sovStandingMember(uint64(l))
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovStandingMember(uint64(l))
	}
	return n
}

func (m *SimpleStandingMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PubKey != nil {
		l = m.PubKey.Size()
		n += 1 + l + sovStandingMember(uint64(l))
	}
	return n
}

func (m *StandingMemberSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.StandingMembers) > 0 {
		for _, e := range m.StandingMembers {
			l = e.Size()
			n += 1 + l + sovStandingMember(uint64(l))
		}
	}
	if m.Coordinator != nil {
		l = m.Coordinator.Size()
		n += 1 + l + sovStandingMember(uint64(l))
	}
	if m.CurrentCoordinatorRanking != 0 {
		n += 1 + sovStandingMember(uint64(m.CurrentCoordinatorRanking))
	}
	return n
}

func sovStandingMember(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStandingMember(x uint64) (n int) {
	return sovStandingMember(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StandingMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStandingMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StandingMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StandingMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStandingMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStandingMember
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStandingMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStandingMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStandingMember
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStandingMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStandingMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStandingMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleStandingMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStandingMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleStandingMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleStandingMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStandingMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStandingMember
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStandingMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubKey == nil {
				m.PubKey = &crypto.PublicKey{}
			}
			if err := m.PubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStandingMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStandingMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StandingMemberSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStandingMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StandingMemberSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StandingMemberSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StandingMembers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStandingMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStandingMember
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStandingMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StandingMembers = append(m.StandingMembers, &StandingMember{})
			if err := m.StandingMembers[len(m.StandingMembers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coordinator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStandingMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStandingMember
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStandingMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coordinator == nil {
				m.Coordinator = &StandingMember{}
			}
			if err := m.Coordinator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentCoordinatorRanking", wireType)
			}
			m.CurrentCoordinatorRanking = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStandingMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentCoordinatorRanking |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStandingMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStandingMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStandingMember(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStandingMember
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStandingMember
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStandingMember
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStandingMember
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStandingMember
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStandingMember
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStandingMember        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStandingMember          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStandingMember = fmt.Errorf("proto: unexpected end of group")
)
