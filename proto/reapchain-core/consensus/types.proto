syntax = "proto3";
package reapchain.consensus;

option go_package = "github.com/reapchain/reapchain-core/proto/reapchain-core/consensus";

import "gogoproto/gogo.proto";
import "reapchain-core/types/types.proto";
import "reapchain-core/types/qrn.proto";
import "reapchain-core/types/setting_steering_member.proto";
import "reapchain-core/types/vrf.proto";
import "reapchain-core/libs/bits/types.proto";

// NewRoundStep is sent for every step taken in the ConsensusState.
// For every height/round/step transition
message NewRoundStep {
  int64  height                   = 1;
  int32  round                    = 2;
  uint32 step                     = 3;
  int64  seconds_since_start_time = 4;
  int32  last_commit_round        = 5;
}

// NewValidBlock is sent when a validator observes a valid block B in some round r,
//i.e., there is a Proposal for block B and 2/3+ prevotes for the block B in the round r.
// In case the block is also committed, then IsCommit flag is set to true.
message NewValidBlock {
  int64                          height                = 1;
  int32                          round                 = 2;
  reapchain.types.PartSetHeader block_part_set_header = 3 [(gogoproto.nullable) = false];
  reapchain.libs.bits.BitArray  block_parts           = 4;
  bool                           is_commit             = 5;
}

// Proposal is sent when a new block is proposed.
message Proposal {
  reapchain.types.Proposal proposal = 1 [(gogoproto.nullable) = false];
}

// ProposalPOL is sent when a previous proposal is re-proposed.
message ProposalPOL {
  int64                         height             = 1;
  int32                         proposal_pol_round = 2;
  reapchain.libs.bits.BitArray proposal_pol       = 3 [(gogoproto.nullable) = false];
}

// BlockPart is sent when gossipping a piece of the proposed block.
message BlockPart {
  int64                 height = 1;
  int32                 round  = 2;
  reapchain.types.Part part   = 3 [(gogoproto.nullable) = false];
}

// Vote is sent when voting for a proposal (or lack thereof).
message Vote {
  reapchain.types.Vote vote = 1;
}

message SettingSteeringMember {
  reapchain.types.SettingSteeringMember setting_steering_member = 1;
}

message Qrn {
  reapchain.types.Qrn qrn = 1;
}

message HasQrn {
  int64                          height = 1;
  int32                          index  = 2;
}

message Vrf {
  reapchain.types.Vrf vrf = 1;
}

message HasVrf {
  int64                          height = 1;
  int32                          index  = 2;
}

message HasSettingSteeringMember {
  int64                          height = 1;
}

// HasVote is sent to indicate that a particular vote has been received.
message HasVote {
  int64                          height = 1;
  int32                          round  = 2;
  reapchain.types.SignedMsgType type   = 3;
  int32                          index  = 4;
}

// VoteSetMaj23 is sent to indicate that a given BlockID has seen +2/3 votes.
message VoteSetMaj23 {
  int64                          height   = 1;
  int32                          round    = 2;
  reapchain.types.SignedMsgType type     = 3;
  reapchain.types.BlockID       block_id = 4 [(gogoproto.customname) = "BlockID", (gogoproto.nullable) = false];
}

// VoteSetBits is sent to communicate the bit-array of votes seen for the BlockID.
message VoteSetBits {
  int64                          height   = 1;
  int32                          round    = 2;
  reapchain.types.SignedMsgType type     = 3;
  reapchain.types.BlockID       block_id = 4 [(gogoproto.customname) = "BlockID", (gogoproto.nullable) = false];
  reapchain.libs.bits.BitArray  votes    = 5 [(gogoproto.nullable) = false];
}

message Message {
  oneof sum {
    NewRoundStep  new_round_step  = 1;
    NewValidBlock new_valid_block = 2;
    Proposal      proposal        = 3;
    ProposalPOL   proposal_pol    = 4;
    BlockPart     block_part      = 5;
    Vote          vote            = 6;
    HasVote       has_vote        = 7;
    VoteSetMaj23  vote_set_maj23  = 8;
    VoteSetBits   vote_set_bits   = 9;

    Qrn           qrn             = 10;
    HasQrn        has_qrn             = 11;
    Vrf           vrf             = 12;
    HasVrf        has_vrf             = 13;

    SettingSteeringMember setting_steering_member = 14;
    HasSettingSteeringMember has_setting_steering_member = 15;
  }
}
