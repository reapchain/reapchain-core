// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: reapchain/types/vrf.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	crypto "gitlab.reappay.net/sucs-lab//reapchain/proto/reapchain/crypto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type VrfSet struct {
	Vrfs []*Vrf `protobuf:"bytes,1,rep,name=vrfs,proto3" json:"vrfs,omitempty"`
}

func (m *VrfSet) Reset()         { *m = VrfSet{} }
func (m *VrfSet) String() string { return proto.CompactTextString(m) }
func (*VrfSet) ProtoMessage()    {}
func (*VrfSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_2168cd968cae3229, []int{0}
}
func (m *VrfSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VrfSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VrfSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VrfSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VrfSet.Merge(m, src)
}
func (m *VrfSet) XXX_Size() int {
	return m.Size()
}
func (m *VrfSet) XXX_DiscardUnknown() {
	xxx_messageInfo_VrfSet.DiscardUnknown(m)
}

var xxx_messageInfo_VrfSet proto.InternalMessageInfo

func (m *VrfSet) GetVrfs() []*Vrf {
	if m != nil {
		return m.Vrfs
	}
	return nil
}

type Vrf struct {
	Address []byte           `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PubKey  crypto.PublicKey `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key"`
	Value   uint64           `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Height  int64            `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *Vrf) Reset()         { *m = Vrf{} }
func (m *Vrf) String() string { return proto.CompactTextString(m) }
func (*Vrf) ProtoMessage()    {}
func (*Vrf) Descriptor() ([]byte, []int) {
	return fileDescriptor_2168cd968cae3229, []int{1}
}
func (m *Vrf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vrf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vrf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vrf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vrf.Merge(m, src)
}
func (m *Vrf) XXX_Size() int {
	return m.Size()
}
func (m *Vrf) XXX_DiscardUnknown() {
	xxx_messageInfo_Vrf.DiscardUnknown(m)
}

var xxx_messageInfo_Vrf proto.InternalMessageInfo

func (m *Vrf) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Vrf) GetPubKey() crypto.PublicKey {
	if m != nil {
		return m.PubKey
	}
	return crypto.PublicKey{}
}

func (m *Vrf) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Vrf) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type SimpleVrf struct {
	PubKey *crypto.PublicKey `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Value  uint64            `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Height int64             `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *SimpleVrf) Reset()         { *m = SimpleVrf{} }
func (m *SimpleVrf) String() string { return proto.CompactTextString(m) }
func (*SimpleVrf) ProtoMessage()    {}
func (*SimpleVrf) Descriptor() ([]byte, []int) {
	return fileDescriptor_2168cd968cae3229, []int{2}
}
func (m *SimpleVrf) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleVrf) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleVrf.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleVrf) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleVrf.Merge(m, src)
}
func (m *SimpleVrf) XXX_Size() int {
	return m.Size()
}
func (m *SimpleVrf) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleVrf.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleVrf proto.InternalMessageInfo

func (m *SimpleVrf) GetPubKey() *crypto.PublicKey {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *SimpleVrf) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *SimpleVrf) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func init() {
	proto.RegisterType((*VrfSet)(nil), "reapchain.types.VrfSet")
	proto.RegisterType((*Vrf)(nil), "reapchain.types.Vrf")
	proto.RegisterType((*SimpleVrf)(nil), "reapchain.types.SimpleVrf")
}

func init() { proto.RegisterFile("reapchain/types/vrf.proto", fileDescriptor_2168cd968cae3229) }

var fileDescriptor_2168cd968cae3229 = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0x9b, 0xb5, 0x76, 0x98, 0x09, 0x42, 0x18, 0x52, 0x37, 0x88, 0x65, 0xa7, 0x9c, 0x52,
	0x98, 0x3b, 0x79, 0xdc, 0x75, 0x20, 0xd2, 0xc1, 0x0e, 0x5e, 0xa4, 0xed, 0xd2, 0x3f, 0x6c, 0x33,
	0x21, 0x4d, 0x07, 0xf9, 0x08, 0xde, 0xfc, 0x58, 0x3b, 0xee, 0xe8, 0x49, 0x64, 0xfd, 0x22, 0xd2,
	0x56, 0xed, 0x98, 0x82, 0xb7, 0xf7, 0xc9, 0xf3, 0xe6, 0xf9, 0xbd, 0xbc, 0x2f, 0xbc, 0x96, 0x2c,
	0x10, 0x51, 0x1a, 0x64, 0xcf, 0x9e, 0xd2, 0x82, 0xe5, 0xde, 0x56, 0xc6, 0x54, 0x48, 0xae, 0x38,
	0xba, 0xfc, 0xb1, 0x68, 0x6d, 0x0d, 0xfa, 0x09, 0x4f, 0x78, 0xed, 0x79, 0x55, 0xd5, 0xb4, 0x0d,
	0x86, 0x6d, 0x42, 0x24, 0xb5, 0x50, 0xdc, 0x5b, 0x31, 0x9d, 0x37, 0xe6, 0x68, 0x0c, 0xed, 0x85,
	0x8c, 0xe7, 0x4c, 0x21, 0x02, 0xad, 0xad, 0x8c, 0x73, 0x07, 0xb8, 0x26, 0xe9, 0x8d, 0xfb, 0xf4,
	0x24, 0x9c, 0x2e, 0x64, 0xec, 0xd7, 0x1d, 0xa3, 0x17, 0x00, 0xcd, 0x85, 0x8c, 0x91, 0x03, 0xbb,
	0xc1, 0x72, 0x29, 0x59, 0x5e, 0x7d, 0x02, 0xe4, 0xc2, 0xff, 0x96, 0xe8, 0x0e, 0x76, 0x45, 0x11,
	0x3e, 0xad, 0x98, 0x76, 0x3a, 0x2e, 0x20, 0xbd, 0xf1, 0xf0, 0x28, 0xae, 0x19, 0x82, 0x3e, 0x14,
	0xe1, 0x3a, 0x8b, 0x66, 0x4c, 0x4f, 0xad, 0xdd, 0xfb, 0x8d, 0xe1, 0xdb, 0xa2, 0x08, 0x67, 0x4c,
	0xa3, 0x3e, 0x3c, 0xdb, 0x06, 0xeb, 0x82, 0x39, 0xa6, 0x0b, 0x88, 0xe5, 0x37, 0x02, 0x5d, 0x41,
	0x3b, 0x65, 0x59, 0x92, 0x2a, 0xc7, 0x72, 0x01, 0x31, 0xfd, 0x2f, 0x35, 0xe2, 0xf0, 0x7c, 0x9e,
	0x6d, 0xc4, 0x9a, 0x55, 0x03, 0x4d, 0x5a, 0x2c, 0xf8, 0x17, 0xfb, 0x1b, 0xd8, 0xf9, 0x1b, 0x68,
	0x1e, 0x03, 0xa7, 0xf7, 0xbb, 0x03, 0x06, 0xfb, 0x03, 0x06, 0x1f, 0x07, 0x0c, 0x5e, 0x4b, 0x6c,
	0xec, 0x4b, 0x6c, 0xbc, 0x95, 0xd8, 0x78, 0x9c, 0x24, 0x99, 0x4a, 0x8b, 0x90, 0x46, 0x7c, 0xe3,
	0xb5, 0x2b, 0x6f, 0xab, 0xe6, 0x30, 0x27, 0xe7, 0x0c, 0xed, 0xfa, 0xf9, 0xf6, 0x33, 0x00, 0x00,
	0xff, 0xff, 0xae, 0xf0, 0xcd, 0xa3, 0xe8, 0x01, 0x00, 0x00,
}

func (m *VrfSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VrfSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VrfSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Vrfs) > 0 {
		for iNdEx := len(m.Vrfs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vrfs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVrf(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Vrf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vrf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vrf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintVrf(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x20
	}
	if m.Value != 0 {
		i = encodeVarintVrf(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.PubKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintVrf(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintVrf(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SimpleVrf) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleVrf) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleVrf) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintVrf(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if m.Value != 0 {
		i = encodeVarintVrf(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if m.PubKey != nil {
		{
			size, err := m.PubKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVrf(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVrf(dAtA []byte, offset int, v uint64) int {
	offset -= sovVrf(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VrfSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vrfs) > 0 {
		for _, e := range m.Vrfs {
			l = e.Size()
			n += 1 + l + sovVrf(uint64(l))
		}
	}
	return n
}

func (m *Vrf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovVrf(uint64(l))
	}
	l = m.PubKey.Size()
	n += 1 + l + sovVrf(uint64(l))
	if m.Value != 0 {
		n += 1 + sovVrf(uint64(m.Value))
	}
	if m.Height != 0 {
		n += 1 + sovVrf(uint64(m.Height))
	}
	return n
}

func (m *SimpleVrf) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PubKey != nil {
		l = m.PubKey.Size()
		n += 1 + l + sovVrf(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovVrf(uint64(m.Value))
	}
	if m.Height != 0 {
		n += 1 + sovVrf(uint64(m.Height))
	}
	return n
}

func sovVrf(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVrf(x uint64) (n int) {
	return sovVrf(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VrfSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VrfSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VrfSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vrfs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vrfs = append(m.Vrfs, &Vrf{})
			if err := m.Vrfs[len(m.Vrfs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Vrf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vrf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vrf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVrf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleVrf) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleVrf: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleVrf: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVrf
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVrf
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubKey == nil {
				m.PubKey = &crypto.PublicKey{}
			}
			if err := m.PubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVrf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVrf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVrf(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVrf
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVrf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVrf
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVrf
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVrf
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVrf        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVrf          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVrf = fmt.Errorf("proto: unexpected end of group")
)
