// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: reapchain/types/qn.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	crypto "gitlab.reappay.net/sucs-lab/reapchain/proto/reapchain/crypto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QnSet struct {
	Qns []*Qn `protobuf:"bytes,1,rep,name=qns,proto3" json:"qns,omitempty"`
}

func (m *QnSet) Reset()         { *m = QnSet{} }
func (m *QnSet) String() string { return proto.CompactTextString(m) }
func (*QnSet) ProtoMessage()    {}
func (*QnSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_01ce46a59e777a46, []int{0}
}
func (m *QnSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QnSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QnSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QnSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QnSet.Merge(m, src)
}
func (m *QnSet) XXX_Size() int {
	return m.Size()
}
func (m *QnSet) XXX_DiscardUnknown() {
	xxx_messageInfo_QnSet.DiscardUnknown(m)
}

var xxx_messageInfo_QnSet proto.InternalMessageInfo

func (m *QnSet) GetQns() []*Qn {
	if m != nil {
		return m.Qns
	}
	return nil
}

type Qn struct {
	Address []byte           `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	PubKey  crypto.PublicKey `protobuf:"bytes,2,opt,name=pub_key,json=pubKey,proto3" json:"pub_key"`
	Value   uint64           `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Height  int64            `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *Qn) Reset()         { *m = Qn{} }
func (m *Qn) String() string { return proto.CompactTextString(m) }
func (*Qn) ProtoMessage()    {}
func (*Qn) Descriptor() ([]byte, []int) {
	return fileDescriptor_01ce46a59e777a46, []int{1}
}
func (m *Qn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Qn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Qn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Qn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Qn.Merge(m, src)
}
func (m *Qn) XXX_Size() int {
	return m.Size()
}
func (m *Qn) XXX_DiscardUnknown() {
	xxx_messageInfo_Qn.DiscardUnknown(m)
}

var xxx_messageInfo_Qn proto.InternalMessageInfo

func (m *Qn) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

func (m *Qn) GetPubKey() crypto.PublicKey {
	if m != nil {
		return m.PubKey
	}
	return crypto.PublicKey{}
}

func (m *Qn) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Qn) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type SimpleQn struct {
	PubKey *crypto.PublicKey `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	Value  uint64            `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	Height int64             `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *SimpleQn) Reset()         { *m = SimpleQn{} }
func (m *SimpleQn) String() string { return proto.CompactTextString(m) }
func (*SimpleQn) ProtoMessage()    {}
func (*SimpleQn) Descriptor() ([]byte, []int) {
	return fileDescriptor_01ce46a59e777a46, []int{2}
}
func (m *SimpleQn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimpleQn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimpleQn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimpleQn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleQn.Merge(m, src)
}
func (m *SimpleQn) XXX_Size() int {
	return m.Size()
}
func (m *SimpleQn) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleQn.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleQn proto.InternalMessageInfo

func (m *SimpleQn) GetPubKey() *crypto.PublicKey {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *SimpleQn) GetValue() uint64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *SimpleQn) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func init() {
	proto.RegisterType((*QnSet)(nil), "reapchain.types.QnSet")
	proto.RegisterType((*Qn)(nil), "reapchain.types.Qn")
	proto.RegisterType((*SimpleQn)(nil), "reapchain.types.SimpleQn")
}

func init() { proto.RegisterFile("reapchain/types/qn.proto", fileDescriptor_01ce46a59e777a46) }

var fileDescriptor_01ce46a59e777a46 = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x91, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0x9b, 0x75, 0x7f, 0x24, 0x13, 0x84, 0x38, 0xa4, 0x6c, 0x50, 0xcb, 0x40, 0xe8, 0xc5,
	0x04, 0xa6, 0x27, 0xf1, 0xb4, 0xeb, 0x2e, 0xb6, 0x03, 0x0f, 0x5e, 0x24, 0xed, 0x5e, 0xba, 0xb2,
	0x9a, 0x66, 0x6d, 0x2a, 0xe4, 0x1b, 0x78, 0xf4, 0x63, 0xed, 0xb8, 0xa3, 0x27, 0x91, 0xed, 0x8b,
	0xc8, 0x5a, 0xb5, 0x63, 0x0a, 0xde, 0xf2, 0xe4, 0x97, 0x3c, 0x3f, 0x78, 0x5f, 0x6c, 0x65, 0xc0,
	0x65, 0x38, 0xe7, 0xb1, 0x60, 0x4a, 0x4b, 0xc8, 0xd9, 0x52, 0x50, 0x99, 0xa5, 0x2a, 0x25, 0x27,
	0x3f, 0x84, 0x96, 0xa4, 0xdf, 0x8b, 0xd2, 0x28, 0x2d, 0x19, 0xdb, 0x9d, 0xaa, 0x67, 0xfd, 0x41,
	0x5d, 0x10, 0x66, 0x5a, 0xaa, 0x94, 0x2d, 0x40, 0xe7, 0x15, 0x1c, 0x52, 0xdc, 0xf2, 0xc4, 0x14,
	0x14, 0xb9, 0xc0, 0xe6, 0x52, 0xe4, 0x16, 0x72, 0x4c, 0xb7, 0x3b, 0x3a, 0xa5, 0x07, 0xd5, 0xd4,
	0x13, 0xfe, 0x8e, 0x0f, 0x5f, 0x10, 0x6e, 0x78, 0x82, 0x58, 0xb8, 0xc3, 0x67, 0xb3, 0x0c, 0xf2,
	0xdd, 0x0f, 0xe4, 0x1e, 0xfb, 0xdf, 0x91, 0xdc, 0xe0, 0x8e, 0x2c, 0x82, 0xc7, 0x05, 0x68, 0xab,
	0xe1, 0x20, 0xb7, 0x3b, 0x1a, 0xec, 0x75, 0x55, 0x7e, 0x7a, 0x57, 0x04, 0x49, 0x1c, 0x4e, 0x40,
	0x8f, 0x9b, 0xab, 0xf7, 0x73, 0xc3, 0x6f, 0xcb, 0x22, 0x98, 0x80, 0x26, 0x3d, 0xdc, 0x7a, 0xe6,
	0x49, 0x01, 0x96, 0xe9, 0x20, 0xb7, 0xe9, 0x57, 0x81, 0x9c, 0xe1, 0xf6, 0x1c, 0xe2, 0x68, 0xae,
	0xac, 0xa6, 0x83, 0x5c, 0xd3, 0xff, 0x4a, 0x43, 0x81, 0x8f, 0xa6, 0xf1, 0x93, 0x4c, 0xc0, 0x13,
	0xe4, 0xba, 0xb6, 0xa2, 0x7f, 0xad, 0xbf, 0x7d, 0x8d, 0xbf, 0x7d, 0xe6, 0xbe, 0x6f, 0x7c, 0xbf,
	0xda, 0xd8, 0x68, 0xbd, 0xb1, 0xd1, 0xc7, 0xc6, 0x46, 0xaf, 0x5b, 0xdb, 0x58, 0x6f, 0x6d, 0xe3,
	0x6d, 0x6b, 0x1b, 0x0f, 0xb7, 0x51, 0xac, 0x12, 0x1e, 0x94, 0x4a, 0xc9, 0x35, 0x15, 0xa0, 0x58,
	0x5e, 0x84, 0xf9, 0x65, 0xc2, 0x03, 0xc6, 0xea, 0xf1, 0x57, 0xab, 0x39, 0xd8, 0x67, 0xd0, 0x2e,
	0xaf, 0xaf, 0x3e, 0x03, 0x00, 0x00, 0xff, 0xff, 0x92, 0xbf, 0x14, 0xa1, 0xe9, 0x01, 0x00, 0x00,
}

func (m *QnSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QnSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QnSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Qns) > 0 {
		for iNdEx := len(m.Qns) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Qns[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQn(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Qn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Qn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Qn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQn(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x20
	}
	if m.Value != 0 {
		i = encodeVarintQn(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.PubKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQn(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQn(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SimpleQn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimpleQn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimpleQn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQn(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if m.Value != 0 {
		i = encodeVarintQn(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if m.PubKey != nil {
		{
			size, err := m.PubKey.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQn(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQn(dAtA []byte, offset int, v uint64) int {
	offset -= sovQn(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QnSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Qns) > 0 {
		for _, e := range m.Qns {
			l = e.Size()
			n += 1 + l + sovQn(uint64(l))
		}
	}
	return n
}

func (m *Qn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQn(uint64(l))
	}
	l = m.PubKey.Size()
	n += 1 + l + sovQn(uint64(l))
	if m.Value != 0 {
		n += 1 + sovQn(uint64(m.Value))
	}
	if m.Height != 0 {
		n += 1 + sovQn(uint64(m.Height))
	}
	return n
}

func (m *SimpleQn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PubKey != nil {
		l = m.PubKey.Size()
		n += 1 + l + sovQn(uint64(l))
	}
	if m.Value != 0 {
		n += 1 + sovQn(uint64(m.Value))
	}
	if m.Height != 0 {
		n += 1 + sovQn(uint64(m.Height))
	}
	return n
}

func sovQn(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQn(x uint64) (n int) {
	return sovQn(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QnSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QnSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QnSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qns", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Qns = append(m.Qns, &Qn{})
			if err := m.Qns[len(m.Qns)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Qn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Qn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Qn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQn
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimpleQn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQn
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SimpleQn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SimpleQn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQn
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQn
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubKey == nil {
				m.PubKey = &crypto.PublicKey{}
			}
			if err := m.PubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQn
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQn(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQn
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQn(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQn
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQn
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQn
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQn
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQn
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQn
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQn        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQn          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQn = fmt.Errorf("proto: unexpected end of group")
)
