// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: reapchain/types/setting_steering_member.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	crypto "github.com/reapchain/reapchain-core/proto/reapchain/crypto"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SettingSteeringMember struct {
	Height                int64            `protobuf:"varint,1,opt,name=height,proto3" json:"height,omitempty"`
	Timestamp             time.Time        `protobuf:"bytes,2,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
	CoordinatorPubKey     crypto.PublicKey `protobuf:"bytes,3,opt,name=coordinator_pub_key,json=coordinatorPubKey,proto3" json:"coordinator_pub_key"`
	SteeringMemberIndexes []int32          `protobuf:"varint,4,rep,packed,name=steering_member_indexes,json=steeringMemberIndexes,proto3" json:"steering_member_indexes,omitempty"`
	Signature             []byte           `protobuf:"bytes,5,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *SettingSteeringMember) Reset()         { *m = SettingSteeringMember{} }
func (m *SettingSteeringMember) String() string { return proto.CompactTextString(m) }
func (*SettingSteeringMember) ProtoMessage()    {}
func (*SettingSteeringMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_e12c47bd3f2823fa, []int{0}
}
func (m *SettingSteeringMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SettingSteeringMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SettingSteeringMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SettingSteeringMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettingSteeringMember.Merge(m, src)
}
func (m *SettingSteeringMember) XXX_Size() int {
	return m.Size()
}
func (m *SettingSteeringMember) XXX_DiscardUnknown() {
	xxx_messageInfo_SettingSteeringMember.DiscardUnknown(m)
}

var xxx_messageInfo_SettingSteeringMember proto.InternalMessageInfo

func (m *SettingSteeringMember) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *SettingSteeringMember) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

func (m *SettingSteeringMember) GetCoordinatorPubKey() crypto.PublicKey {
	if m != nil {
		return m.CoordinatorPubKey
	}
	return crypto.PublicKey{}
}

func (m *SettingSteeringMember) GetSteeringMemberIndexes() []int32 {
	if m != nil {
		return m.SteeringMemberIndexes
	}
	return nil
}

func (m *SettingSteeringMember) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*SettingSteeringMember)(nil), "reapchain.types.SettingSteeringMember")
}

func init() {
	proto.RegisterFile("reapchain/types/setting_steering_member.proto", fileDescriptor_e12c47bd3f2823fa)
}

var fileDescriptor_e12c47bd3f2823fa = []byte{
	// 359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x51, 0xcd, 0x6a, 0xdb, 0x40,
	0x10, 0xd6, 0xfa, 0x8f, 0x5a, 0x2d, 0x94, 0xaa, 0x75, 0x2b, 0xec, 0x22, 0x8b, 0x9e, 0x74, 0xf1,
	0x2e, 0x34, 0x10, 0xc8, 0x55, 0xb7, 0x60, 0x02, 0x8e, 0x9c, 0x53, 0x2e, 0x42, 0x92, 0x27, 0xab,
	0xc5, 0x96, 0x56, 0xec, 0xae, 0x20, 0x7a, 0x0b, 0x3f, 0x40, 0x1e, 0xc8, 0x47, 0x1f, 0x73, 0x4a,
	0x82, 0xfd, 0x22, 0xc1, 0x92, 0x6c, 0x25, 0xbe, 0xcd, 0xcf, 0x37, 0xdf, 0x7c, 0xdf, 0x8c, 0x3e,
	0x11, 0x10, 0x64, 0x51, 0x1c, 0xb0, 0x94, 0xa8, 0x22, 0x03, 0x49, 0x24, 0x28, 0xc5, 0x52, 0xea,
	0x4b, 0x05, 0x20, 0x0e, 0x41, 0x02, 0x49, 0x08, 0x02, 0x67, 0x82, 0x2b, 0x6e, 0x7c, 0x3f, 0xc1,
	0x71, 0x09, 0x1f, 0xfe, 0xa2, 0x9c, 0xf2, 0xb2, 0x47, 0x0e, 0x51, 0x05, 0x1b, 0x8e, 0x1a, 0xd6,
	0x48, 0x14, 0x99, 0xe2, 0x64, 0x09, 0x85, 0xac, 0x9b, 0x63, 0xca, 0x39, 0x5d, 0x01, 0x29, 0xb3,
	0x30, 0x7f, 0x20, 0x8a, 0x25, 0x20, 0x55, 0x90, 0x64, 0x15, 0xe0, 0xdf, 0x53, 0x4b, 0x1f, 0xcc,
	0x2b, 0x19, 0xf3, 0x5a, 0xc5, 0x4d, 0x29, 0xc2, 0xf8, 0xad, 0xf7, 0x62, 0x60, 0x34, 0x56, 0x26,
	0xb2, 0x91, 0xd3, 0xf6, 0xea, 0xcc, 0x70, 0xf5, 0xfe, 0x89, 0xc4, 0x6c, 0xd9, 0xc8, 0xf9, 0xfa,
	0x7f, 0x88, 0xab, 0x35, 0xf8, 0xb8, 0x06, 0xdf, 0x1d, 0x11, 0xee, 0x97, 0xcd, 0xcb, 0x58, 0x5b,
	0xbf, 0x8e, 0x91, 0xd7, 0x8c, 0x19, 0xb7, 0xfa, 0xcf, 0x88, 0x73, 0xb1, 0x60, 0x69, 0xa0, 0xb8,
	0xf0, 0xb3, 0x3c, 0xf4, 0x97, 0x50, 0x98, 0xed, 0x92, 0x6d, 0x84, 0x1b, 0xe3, 0x95, 0x23, 0x3c,
	0xcb, 0xc3, 0x15, 0x8b, 0xa6, 0x50, 0xb8, 0x9d, 0x03, 0x9d, 0xf7, 0xe3, 0xc3, 0xf4, 0x2c, 0x0f,
	0xa7, 0x50, 0x18, 0x97, 0xfa, 0x9f, 0xb3, 0x33, 0xfa, 0x2c, 0x5d, 0xc0, 0x23, 0x48, 0xb3, 0x63,
	0xb7, 0x9d, 0xae, 0x37, 0x90, 0x9f, 0xfc, 0x5d, 0x57, 0x4d, 0xe3, 0xaf, 0xde, 0x97, 0x8c, 0xa6,
	0x81, 0xca, 0x05, 0x98, 0x5d, 0x1b, 0x39, 0xdf, 0xbc, 0xa6, 0xe0, 0xce, 0x37, 0x3b, 0x0b, 0x6d,
	0x77, 0x16, 0x7a, 0xdb, 0x59, 0x68, 0xbd, 0xb7, 0xb4, 0xed, 0xde, 0xd2, 0x9e, 0xf7, 0x96, 0x76,
	0x7f, 0x45, 0x99, 0x8a, 0xf3, 0x10, 0x47, 0x3c, 0x21, 0xcd, 0x07, 0x4e, 0xd1, 0x24, 0xe2, 0xa2,
	0x3e, 0x3b, 0x39, 0x7b, 0x7b, 0xd8, 0x2b, 0xcb, 0x17, 0xef, 0x01, 0x00, 0x00, 0xff, 0xff, 0xbd,
	0xe3, 0xaf, 0x17, 0x10, 0x02, 0x00, 0x00,
}

func (m *SettingSteeringMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SettingSteeringMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SettingSteeringMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signature) > 0 {
		i -= len(m.Signature)
		copy(dAtA[i:], m.Signature)
		i = encodeVarintSettingSteeringMember(dAtA, i, uint64(len(m.Signature)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SteeringMemberIndexes) > 0 {
		dAtA2 := make([]byte, len(m.SteeringMemberIndexes)*10)
		var j1 int
		for _, num1 := range m.SteeringMemberIndexes {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintSettingSteeringMember(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.CoordinatorPubKey.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSettingSteeringMember(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	n4, err4 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintSettingSteeringMember(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x12
	if m.Height != 0 {
		i = encodeVarintSettingSteeringMember(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintSettingSteeringMember(dAtA []byte, offset int, v uint64) int {
	offset -= sovSettingSteeringMember(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SettingSteeringMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovSettingSteeringMember(uint64(m.Height))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovSettingSteeringMember(uint64(l))
	l = m.CoordinatorPubKey.Size()
	n += 1 + l + sovSettingSteeringMember(uint64(l))
	if len(m.SteeringMemberIndexes) > 0 {
		l = 0
		for _, e := range m.SteeringMemberIndexes {
			l += sovSettingSteeringMember(uint64(e))
		}
		n += 1 + sovSettingSteeringMember(uint64(l)) + l
	}
	l = len(m.Signature)
	if l > 0 {
		n += 1 + l + sovSettingSteeringMember(uint64(l))
	}
	return n
}

func sovSettingSteeringMember(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSettingSteeringMember(x uint64) (n int) {
	return sovSettingSteeringMember(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SettingSteeringMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSettingSteeringMember
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SettingSteeringMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SettingSteeringMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettingSteeringMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettingSteeringMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSettingSteeringMember
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSettingSteeringMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoordinatorPubKey", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettingSteeringMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSettingSteeringMember
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSettingSteeringMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CoordinatorPubKey.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSettingSteeringMember
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SteeringMemberIndexes = append(m.SteeringMemberIndexes, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSettingSteeringMember
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSettingSteeringMember
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSettingSteeringMember
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SteeringMemberIndexes) == 0 {
					m.SteeringMemberIndexes = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSettingSteeringMember
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SteeringMemberIndexes = append(m.SteeringMemberIndexes, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SteeringMemberIndexes", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSettingSteeringMember
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSettingSteeringMember
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSettingSteeringMember
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signature = append(m.Signature[:0], dAtA[iNdEx:postIndex]...)
			if m.Signature == nil {
				m.Signature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSettingSteeringMember(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSettingSteeringMember
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSettingSteeringMember(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSettingSteeringMember
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSettingSteeringMember
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSettingSteeringMember
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSettingSteeringMember
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSettingSteeringMember
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSettingSteeringMember
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSettingSteeringMember        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSettingSteeringMember          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSettingSteeringMember = fmt.Errorf("proto: unexpected end of group")
)
